{"version":3,"file":"updateProject.js","sourceRoot":"","sources":["../../$/projectsSet/updateProject.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,kEAA0C;AAE1C,kEAA0C;AAC1C,+EAAuD;AAqBvD;;;GAGG;AACH,SAAe,aAAa,CAC1B,MAAW,EACX,IAAsC,EACtC,OAAgB;;QAEhB,MAAM,KAAK,GAAG,GAAS,EAAE;YACvB,IAAI,IAAI,KAAK,SAAS,EAAE;gBACtB,OAAO,IAAA,mBAAS,EAA6F;oBAC3G,IAAI,EAAE,KAAK;oBACX,GAAG,EAAE,oCAAoC;oBACzC,IAAI,EAAE,MAAM;iBACb,CAAC,CAAC;aACJ;YACD,IAAI,IAAI,KAAK,SAAS,EAAE;gBACtB,OAAO,IAAA,mBAAS,EAA6F;oBAC3G,IAAI,EAAE,KAAK;oBACX,GAAG,EAAE,uCAAuC;oBAC5C,IAAI,EAAE,MAAM;iBACb,CAAC,CAAC;aACJ;YACD,IAAI,IAAI,KAAK,QAAQ,EAAE;gBACrB,MAAM,WAAW,GAAG,MAAM,IAAA,sBAAY,EAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBAChE,MAAM,GAAG,GAAG,WAAY,CAAC,IAAK,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;gBAC3E,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE;oBAAE,MAAM,yDAAyD,OAAO,EAAE,CAAC;gBAC9F,MAAM,CAAC,gBAAgB,GAAG,GAAG,CAAC,EAAE,CAAC;gBACjC,OAAO,IAAA,mBAAS,EAAkF;oBAChG,IAAI,EAAE,KAAK;oBACX,GAAG,EAAE,gCAAgC;oBACrC,IAAI,EAAE,MAAM;iBACb,CAAC,CAAC;aACJ;QACH,CAAC,CAAA,CAAC;QACF,mBAAmB;QACnB,OAAO,IAAA,mBAAS,EAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC;CAAA;AACD,kBAAe,aAAa,CAAC","sourcesContent":["import { components } from '../../types';\r\nimport c1request from '../base/c1request';\r\nimport Request from '../base/c1request';\r\nimport LogAction from '../base/LogAction';\r\nimport projectTypes from '../projectsGet/projectTypes';\r\n\r\nasync function updateProject(\r\n  projectStructure:\r\n    | components['schemas']['CaseMap.Modules.Projects.App.Projects.UpdateProjectWithBlocks']\r\n    | components['schemas']['CaseMap.Modules.Projects.App.Projects.ProjectSummary'],\r\n  tabs: 'allTabs'\r\n): Promise<components['schemas']['CaseMap.Modules.Projects.Models.Projects.ProjectSummaryWithBlocks']>;\r\nasync function updateProject(\r\n  projectStructure:\r\n    | components['schemas']['CaseMap.Modules.Projects.App.Projects.UpdateProjectWithBlocks']\r\n    | components['schemas']['CaseMap.Modules.Projects.App.Projects.ProjectSummary'],\r\n  tabs: 'mainTab'\r\n): Promise<components['schemas']['CaseMap.Modules.Projects.Models.Projects.ProjectSummaryWithBlocks']>;\r\nasync function updateProject(\r\n  projectStructure:\r\n    | components['schemas']['CaseMap.Modules.Projects.App.Projects.UpdateProjectWithBlocks']\r\n    | components['schemas']['CaseMap.Modules.Projects.App.Projects.ProjectSummary'],\r\n  tabs: 'oneTab',\r\n  tabName: string\r\n): Promise<components['schemas']['CaseMap.Modules.Projects.Controllers.CustomTabResponse']>;\r\n/**\r\n * Обновляет одну или более вкладок на деле, в зависимости от переданных параметров\r\n * @example $.projectsSet.updateProject(projectStructure, 'allTabs')\r\n */\r\nasync function updateProject(\r\n  params: any,\r\n  tabs: 'allTabs' | 'mainTab' | 'oneTab',\r\n  tabName?: string\r\n): Promise<components['schemas']['CaseMap.Modules.Projects.App.Projects.ProjectSummary']> {\r\n  const logic = async () => {\r\n    if (tabs === 'mainTab') {\r\n      return c1request<components['schemas']['CaseMap.Modules.Projects.Models.Projects.ProjectSummaryWithBlocks']>({\r\n        type: 'put',\r\n        url: '/api/Projects/UpdateProjectSummary',\r\n        body: params,\r\n      });\r\n    }\r\n    if (tabs === 'allTabs') {\r\n      return c1request<components['schemas']['CaseMap.Modules.Projects.Models.Projects.ProjectSummaryWithBlocks']>({\r\n        type: 'put',\r\n        url: '/api/Projects/UpdateProjectWithBlocks',\r\n        body: params,\r\n      });\r\n    }\r\n    if (tabs === 'oneTab') {\r\n      const projectType = await projectTypes(params.ProjectType.Name);\r\n      const tab = projectType!.Tabs!.find((tabData) => tabData.Name === tabName);\r\n      if (!tab || !tab.Id) throw `$.projectsSet.updateProject - no tab found with name2 ${tabName}`;\r\n      params.ProjectTypeTabId = tab.Id;\r\n      return c1request<components['schemas']['CaseMap.Modules.Projects.Controllers.CustomTabResponse']>({\r\n        type: 'put',\r\n        url: '/api/Projects/UpdateProjectTab',\r\n        body: params,\r\n      });\r\n    }\r\n  };\r\n  // @ts-expect-error\r\n  return LogAction('$.projectsSet.updateProject', logic);\r\n}\r\nexport default updateProject;\r\n"]}