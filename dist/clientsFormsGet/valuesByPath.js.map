{"version":3,"file":"valuesByPath.js","sourceRoot":"","sources":["../../$/clientsFormsGet/valuesByPath.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,kEAA0C;AAC1C,wEAAkD;AAuClD;;;;;;;GAOG;AACH,SAAe,YAAY,CACvB,IAAiG,EACjG,MAKC;;QAED,6DAA6D;QAC7D,aAAa;QACb,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,IAAA,sBAAc,EAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACjD,OAAO,IAAA,mBAAS,EAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;IAC7D,CAAC;CAAA;AACD,kBAAe,YAAY,CAAC","sourcesContent":["import { components, Field, FieldPath } from '../../types';\nimport LogAction from '../base/LogAction';\nimport valuesByPathFn from '../base/valuesByPath';\n\n// async function valuesByPath(\n//     form: components['schemas']['CaseMap.Modu\n// les.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n//     params: { fieldPath: FieldPath[] }\n// ): Promise<Field['Value'][]>;\nasync function valuesByPath(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: { fieldPath: FieldPath[]; deepValues: true }\n): Promise<[string | boolean | number]>;\nasync function valuesByPath(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: { grouping: 'blocks' | 'lines'; returnFields: true; fieldPath: FieldPath[] }\n): Promise<Field[][]>;\nasync function valuesByPath(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: { grouping: 'blocks' | 'lines'; fieldPath: FieldPath[] }\n): Promise<Field['Value'][][]>;\nasync function valuesByPath(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: { grouping: 'blocks' | 'lines'; fieldPath: FieldPath[]; deepValues: true }\n): Promise<[string | boolean | number][]>;\nasync function valuesByPath(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: { grouping: 'blocksLines'; returnFields: true; fieldPath: FieldPath[] }\n): Promise<Field[][][]>;\nasync function valuesByPath(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: {\n        grouping: 'blocksLines';\n        fieldPath: FieldPath[];\n        returnFields: false;\n    }\n): Promise<Field['Value'][][][]>;\nasync function valuesByPath(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: { grouping: 'blocksLines'; fieldPath: FieldPath[]; deepValues: true }\n): Promise<[string | boolean | number][][]>;\n/**\n * Ищет значения по указанному пути (путь можно получить\n * с помошью pathsByName), возвращает массив данных, в зависимости от параметров\n * @example $.clientFormsGet.valuesByPath(form, { fieldPath:\n * { blockId: '3271c745-9d01-eb11-b826-0050560107dd', lineId:'3271c745-9d01-eb11-b826-0050560107dd',\n * fieldId:'3271c745-9d01-eb11-b826-0050560107dd' }, grouping: 'blocks',\n * returnFields: true, deepValues: true })\n */\nasync function valuesByPath(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: {\n        fieldPath: FieldPath[];\n        grouping?: 'blocks' | 'lines' | 'blocksLines';\n        returnFields?: boolean;\n        deepValues?: boolean;\n    },\n): ReturnType<typeof valuesByPathFn> {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const logic = () => valuesByPathFn(form, params);\n    return LogAction('$.clientFormsGet.valuesByPath', logic);\n}\nexport default valuesByPath;\n"]}