{"version":3,"file":"valuesByName.js","sourceRoot":"","sources":["../../$/clientsFormsGet/valuesByName.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,kEAA0C;AAC1C,wEAAgD;AAChD,sEAA8C;AA+B9C;;;;;GAKG;AACH,6EAA6E;AAC7E,SAAe,YAAY,CACvB,IAAiG,EACjG,MAMC;;QAED,MAAM,KAAK,GAAG,GAAS,EAAE;YACrB,MAAM,KAAK,GAAG,MAAM,IAAA,qBAAW,EAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC9C,6DAA6D;YAC7D,aAAa;YACb,MAAM,MAAM,GAAG,MAAM,IAAA,sBAAY,EAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YACrF,OAAO,MAAuG,CAAC;QACnH,CAAC,CAAA,CAAC;QACF,OAAO,IAAA,mBAAS,EAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;IAC1D,CAAC;CAAA;AACD,kBAAe,YAAY,CAAC","sourcesContent":["import { components, Field } from '../../types';\nimport LogAction from '../base/LogAction';\nimport valuesByPath from '../base/valuesByPath';\nimport pathsByName from '../base/pathsByName';\n\nasync function valuesByName(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: { fieldNames: string[]; blockName?: string }\n): Promise<Field['Value'][]>;\nasync function valuesByName(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: { fieldNames: string[]; blockName?: string; deepValues: true }\n): Promise<any[]>;\nasync function valuesByName(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: { grouping: 'blocks' | 'lines'; returnFields: true; fieldNames: string[]; blockName?: string }\n): Promise<Field[][]>;\nasync function valuesByName(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: { grouping: 'blocks' | 'lines'; fieldNames: string[]; blockName?: string }\n): Promise<Field['Value'][][]>;\nasync function valuesByName(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: { grouping: 'blocks' | 'lines'; fieldNames: string[]; blockName?: string; deepValues: true }\n): Promise<[string | boolean | number][]>;\nasync function valuesByName(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: {\n        grouping?: 'blocksLines';\n        returnFields: true;\n        fieldNames: string[];\n        blockName?: string;\n    }\n): Promise<Field[][][]>;\n/**\n * Совершает поиск значений поля по его имени,\n * возвращает массив результатов в зависимости от параметров, например ['Значение1', 'Значение2']\n * @example $.clientForms.valuesByName(form, { fieldNames: ['Поле 1', 'Поле 2'] ,\n * blockName: 'Новый блок', deepValues: true })\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nasync function valuesByName(\n    form: components['schemas']['CaseMap.Modules.Projects.App.IntakeForm.ViewModels.IntakeObjectDto'],\n    params: {\n        fieldNames: string[];\n        blockName?: string;\n        grouping?: 'blocks' | 'lines' | 'blocksLines';\n        returnFields?: boolean;\n        deepValues?: boolean;\n    },\n) {\n    const logic = async () => {\n        const paths = await pathsByName(form, params);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const values = await valuesByPath(form, Object.assign(params, { fieldPath: paths }));\n        return values as Field['Value'][] | [string | boolean | number] | Field['Value'][][] | Field[][] | Field[][][];\n    };\n    return LogAction('$.clientForms.valuesByName', logic);\n}\nexport default valuesByName;\n"]}