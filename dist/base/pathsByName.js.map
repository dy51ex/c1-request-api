{"version":3,"file":"pathsByName.js","sourceRoot":"","sources":["../../$/base/pathsByName.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,4DAAoC;AAEpC,kBAAe,CACX,GAAwB,EACxB,MAGC,EACmB,EAAE;IACtB,MAAM,KAAK,GAAG,GAAG,EAAE;QACf,MAAM,IAAI,GAAG,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;QACpD,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7C,IAAI,CAAC,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;QAExE,MAAM,MAAM,GAAG,EAAiB,CAAC;QACjC,2BAA2B;QAC3B,GAAG,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,KAA0B,EAAE,EAAE;;YAAC,OAAA,MAAA,KAAK,CAAC,KAAK,0CAAE,OAAO;YACjE,2BAA2B;YAC3B,CAAC,IAAyB,EAAE,EAAE;;gBAAC,OAAA,MAAA,IAAI,CAAC,MAAM,0CAAE,OAAO,CAC/C,CAAC,KAAmD,EAAE,EAAE;oBACpD,mEAAmE;oBACnE,MAAM,IAAI,GAAG,OAAO,KAAK,CAAC,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;oBACnF,IAAI,CAAC,KAAK,CAAC,YAAY;2BAChB,CAAC,IAAI;2BACL,CAAC,IAAI,CAAC,QAAQ;2BACd,CAAC,KAAK,CAAC,EAAE;2BACT,CAAC,IAAI,CAAC,EAAE;2BACR,CAAC,KAAK,CAAC,EAAE,EAAE;wBACd,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;qBACjF;oBACD,IACI,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,IAAI,WAAW,CAAC;2BACxD,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,KAAK,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAC7D;wBACE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG;4BACtC,OAAO,EAAE,KAAK,CAAC,EAAY;4BAC3B,MAAM,EAAE,IAAI,CAAC,EAAY;4BACzB,OAAO,EAAE,KAAK,CAAC,EAAY;4BAC3B,mEAAmE;4BACnE,SAAS,EAAE,KAAK,CAAC,aAAa;4BAC9B,UAAU,EAAE,KAAK,CAAC,YAAuB;4BACzC,sEAAsE;4BACtE,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,KAAK,UAAU;4BAC/C,IAAI,EAAE,IAAc;yBACvB,CAAC;qBACL;gBACL,CAAC,CACJ,CAAA;aAAA,CACJ,CAAA;SAAA,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;IACF,OAAO,IAAA,mBAAS,EAAC,eAAe,EAAE,KAAK,CAAC,CAAC;AAC7C,CAAC,CAAA,CAAC","sourcesContent":["import { FieldPath } from '../../types';\nimport LogAction from './LogAction';\n\nexport default async (\n    obj: Record<string, any>,\n    params: {\n        fieldNames: string[];\n        blockName?: string;\n    },\n): Promise<FieldPath[]> => {\n    const logic = () => {\n        const keys = ['MetadataOfBlocks', 'MetadataBlocks'];\n        const key = keys.find((entry) => obj[entry]);\n        if (!key) throw new Error('obj - no MetadataOfBlocks found in project');\n\n        const result = [] as FieldPath[];\n        // eslint-disable-next-line\n        obj[key].forEach((block: Record<string, any>) => block.Lines?.forEach(\n            // eslint-disable-next-line\n            (line: Record<string, any>) => line.Fields?.forEach(\n                (field: Record<string, Record<string, any> | string>) => {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    const name = typeof field.ProjectField === 'object' ? field.ProjectField.Name : '';\n                    if (!field.ProjectField\n                        || !name\n                        || !line.LineType\n                        || !block.Id\n                        || !line.Id\n                        || !field.Id) {\n                        throw new Error('obj - no ProjectField in field found or LineType undefined');\n                    }\n                    if (\n                        params.fieldNames.includes(name || 'undefined')\n            && (params.blockName ? block.NameInProject === params.blockName : true)\n                    ) {\n                        result[params.fieldNames.indexOf(name)] = {\n                            blockId: block.Id as string,\n                            lineId: line.Id as string,\n                            fieldId: field.Id as string,\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            blockName: block.NameInProject,\n                            multiBlock: block.IsRepeatable as boolean,\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                            multiLine: line.LineType.SysName === 'Repeated',\n                            name: name as string,\n                        };\n                    }\n                },\n            ),\n        ));\n        return result;\n    };\n    return LogAction('$.pathsByName', logic);\n};\n"]}