{"version":3,"file":"SettingsController.js","sourceRoot":"","sources":["../../$/base/SettingsController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,kDAA0B;AAuFjB,gBAvFF,eAAK,CAuFE;AArFd,eAAK,CAAC,QAAQ,CAAC,OAAO,GAAG,EAAE,CAAC;AAE5B,MAAa,kBAAkB;IAW3B,YAAY,KAAa,EAAE,QAAgB,EAAE,MAAc;QACvD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS;YACvC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC;YAC5C,CAAC,CAAC,SAAS,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK;YAC1B,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK;YACnB,CAAC,CAAC,SAAS,CAAC;IACpB,CAAC;IAEK,QAAQ;;YACV,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBACb,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,SAAS,GAAG,IAAI,CAAC,cAAc,EAAE;oBACzD,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;oBAC1B,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;wBACb,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;qBAC1D;oBACD,OAAO,IAAI,CAAC,KAAK,CAAC;iBACrB;aACJ;YACD,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;aAClE;YACD,OAAO,IAAI,CAAC,KAAK,CAAC;QACtB,CAAC;KAAA;IAEK,YAAY;;YACd,IAAI;gBACA,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAC7B,MAAM,QAAQ,GAAG,CACb,MAAM,eAAK,CAAC,IAAI,CAAC,2BAA2B,EAAE;oBAC1C,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,UAAU,EAAE,IAAI;oBAChB,YAAY,EAAE,KAAK;iBACtB,CAAC,CACL,CAAC,IAA+D,CAAC;gBAClE,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC;gBACzC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACxB,MAAM,SAAS,GAAG,SAAS,GAAG,QAAQ,CAAC,GAAG,QAAQ,CAAC,UAAU,KAAK,EAAE,EAAE,CAAC,CAAC;gBACxE,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;gBAChC,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;gBAC5D,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;aACpC;YAAC,OAAO,KAAK,EAAE;gBACZ,OAAO,CAAC,IAAI,CAAC,2CAA4C,KAAe,CAAC,OAAO,EAAE,CAAC,CAAC;aACvF;QACL,CAAC;KAAA;CACJ;AA7DD,gDA6DC;AAQY,QAAA,QAAQ,GAAG,EAAc,CAAC;AAEhC,MAAM,gBAAgB,GAAG,CAC5B,KAAa,EAAE,QAAgB,EAC/B,MAAc,EACd,OAAO,GAAG,SAAS,EACnB,KAAK,GAAG,KAAK,EACT,EAAE;IACN,eAAK,CAAC,QAAQ,CAAC,OAAO,GAAG,MAAM,CAAC;IAChC,gBAAQ,CAAC,UAAU,GAAG,IAAI,kBAAkB,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACtE,gBAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,gBAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;AAC3B,CAAC,CAAC;AAVW,QAAA,gBAAgB,oBAU3B","sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = '';\n\nexport class SettingsController {\n    login: string;\n\n    password: string;\n\n    domain: string;\n\n    token!: string | undefined;\n\n    tokenExpiresIn!: number | undefined;\n\n    constructor(login: string, password: string, domain: string) {\n        this.login = login;\n        this.password = password;\n        this.domain = domain;\n        this.tokenExpiresIn = process.env.expiresIn\n            ? Number.parseInt(process.env.expiresIn, 10)\n            : undefined;\n        this.token = process.env.token\n            ? process.env.token\n            : undefined;\n    }\n\n    async getToken(): Promise<string> {\n        if (!this.token) {\n            const timestamp = Date.now();\n            if (!this.tokenExpiresIn || timestamp > this.tokenExpiresIn) {\n                await this.requestToken();\n                if (!this.token) {\n                    throw new Error('connection: cant refresh auth token');\n                }\n                return this.token;\n            }\n        }\n        if (!this.token) {\n            throw new Error('connection: something wrong with auth token');\n        }\n        return this.token;\n    }\n\n    async requestToken(): Promise<void> {\n        try {\n            const timestamp = Date.now();\n            const response = (\n                await axios.post('/api/ThirdPartyAuth/Login', {\n                    Login: this.login,\n                    Password: this.password,\n                    RememberMe: true,\n                    ProviderName: 'IDE',\n                })\n            ).data as { Token: { access_token: string }, expires_in: string };\n            this.token = response.Token.access_token;\n            console.log(this.token);\n            const expiresIn = timestamp + parseInt(`${response.expires_in}000`, 10);\n            this.tokenExpiresIn = expiresIn;\n            process.env.tokenExpiresIn = this.tokenExpiresIn.toString();\n            console.log('New token catched');\n        } catch (error) {\n            console.warn(`Token not received, possible bad auth - ${(error as Error).message}`);\n        }\n    }\n}\n\ninterface Settings {\n    controller: SettingsController,\n    version: number | undefined,\n    debug: boolean,\n}\n\nexport const settings = {} as Settings;\n\nexport const useSettingsStore = (\n    login: string, password: string,\n    domain: string,\n    version = undefined,\n    debug = false,\n): void => {\n    axios.defaults.baseURL = domain;\n    settings.controller = new SettingsController(login, password, domain);\n    settings.version = version;\n    settings.debug = debug;\n};\n\nexport { axios };\n"]}