{"version":3,"file":"valuesByPath.js","sourceRoot":"","sources":["../../$/base/valuesByPath.ts"],"names":[],"mappings":"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","sourcesContent":["import { components, Field, FieldPath } from '../../types';\nimport LogAction from './LogAction';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport default (obj: components['schemas']['CaseMap.Modules.Projects.Responses.VisualBlocks.ProjectAllVisualBlocksResponse'],\n    params: {\n        fieldPath: FieldPath[];\n        grouping?: 'blocks' | 'lines' | 'blocksLines';\n        returnFields?: boolean;\n        deepValues?: boolean;\n    }) => {\n    const logic = () => {\n        if (!params.fieldPath) throw new Error('no fieldPath present');\n        if (!obj.Blocks) throw new Error('no Blocks found');\n        const result = [] as Field[];\n        const lines = obj.Blocks.filter((block) => {\n            if (!block.VisualBlockId) {\n                throw new Error('No VisualBlockId found in Blocks');\n            }\n            return params.fieldPath.map((el) => el.blockId).includes(block.VisualBlockId);\n        })\n            .map((block) => Object.assign(block, {\n                Lines: (block.Lines ?? []).map((line) => Object.assign(line, {\n                    blockId: block.VisualBlockId,\n                    blockRealId: block.Id,\n                    blockName: block.Name,\n                    blockOrder: block.Order,\n                })),\n            }))\n            .flatMap((block) => block.Lines)\n            .filter((line) => params.fieldPath.map((el) => el.lineId).includes(line.BlockLineId ?? ''));\n        lines.forEach((line) => {\n            line.Values?.forEach((field) => {\n                const fieldData = params.fieldPath\n                    .map((el) => el.fieldId).includes(field.VisualBlockProjectFieldId);\n                if (fieldData) {\n                    const curField = params.fieldPath\n                        .find((el) => el.fieldId === field.VisualBlockProjectFieldId);\n                    if (!line.blockId\n                        || !line.BlockLineId\n                        || !line.blockRealId\n                        || !curField?.fieldId) {\n                        throw new Error('No all needed info from FieldPath');\n                    }\n                    result.push({\n                        Value: field.Value as Field['Value'],\n                        Name: curField.name,\n                        blockId: line.blockId,\n                        blockRealId: line.blockRealId,\n                        blockName: line.blockName || undefined,\n                        blockOrder: line.blockOrder,\n                        lineId: line.BlockLineId,\n                        lineRealId: line.Id || undefined,\n                        lineOrder: line.Order,\n                        fieldId: curField?.fieldId,\n                        multiBlock: curField?.multiBlock,\n                        multiLine: curField?.multiLine,\n                    });\n                }\n            });\n        });\n        if (!params.grouping) {\n            if (params.returnFields) {\n                return result;\n            }\n            if (params.deepValues) {\n                const dresult = result.map((field) => (\n                    field?.Value !== undefined && typeof field?.Value === 'object'\n                        ? field.Value.Name\n                        : field?.Value\n                ));\n                return dresult;\n            }\n            const dresult = result.map((field) => field?.Value as string | number | boolean);\n            return dresult;\n        }\n        if (params.grouping === 'blocks') {\n            const groupedResult: { [key: string]: Field[] } = {};\n            result\n                .filter((el) => el)\n                .forEach((field) => {\n                    if (!field.blockRealId) throw new Error('$.projectsGet.valuesByPath - no blockRealId found in field');\n                    if (!groupedResult[field.blockRealId]) groupedResult[field.blockRealId] = [];\n                    groupedResult[field.blockRealId].push(field);\n                });\n            if (params.returnFields) {\n                const fresult = Object.values(groupedResult);\n                return fresult;\n            }\n            if (params.deepValues) {\n                const fresult = Object.values(groupedResult).map(\n                    (block) => block.map((field) => (\n                        field?.Value !== undefined && typeof field?.Value === 'object'\n                            ? field.Value.Name\n                            : field?.Value)),\n                );\n                return fresult;\n            }\n            const fresult = Object.values(groupedResult)\n                .map((block) => block.map((field) => field.Value as string | number | boolean));\n            return fresult;\n        }\n        if (params.grouping === 'lines') {\n            const groupedResult: { [key: string]: Field[] } = {};\n            result\n                .filter((el) => el)\n                .forEach((field) => {\n                    if (!field.lineRealId) {\n                        throw new Error('$.projectsGet.valuesByPath - no blockRealId found in field');\n                    }\n                    if (!groupedResult[field.lineRealId]) groupedResult[field.lineRealId] = [];\n                    groupedResult[field.lineRealId].push(field);\n                });\n            if (params.returnFields) {\n                const fresult = Object.values(groupedResult);\n                return fresult;\n            }\n            if (params.deepValues) {\n                const fresult = Object.values(groupedResult)\n                    .map((line) => line.map((field) => (\n                        field?.Value !== undefined && typeof field?.Value === 'object'\n                            ? field.Value.Name : field?.Value)));\n                return fresult;\n            }\n            const fresult = Object.values(groupedResult)\n                .map((line) => line.map((field) => field.Value));\n            return fresult;\n        }\n        if (params.grouping === 'blocksLines') {\n            const groupedResult: { [key: string]: Field[] } = {};\n            result\n                .filter((el) => el)\n                .forEach((field) => {\n                    if (!field.blockRealId) throw new Error('$.projectsGet.valuesByPath - no blockRealId found in field');\n                    if (!groupedResult[field.blockRealId]) groupedResult[field.blockRealId] = [];\n                    groupedResult[field.blockRealId].push(field);\n                });\n            const grouped = Object.values(groupedResult);\n            const blockLines = grouped.map((block) => {\n                const lineGroup: { [key: string]: Field[] } = {};\n                block\n                    .filter((el) => el)\n                    .forEach((field) => {\n                        if (!field.lineRealId) throw new Error('$.projectsGet.valuesByPath - no blockRealId found in field');\n                        if (!lineGroup[field.lineRealId]) lineGroup[field.lineRealId] = [];\n                        lineGroup[field.lineRealId].push(field);\n                    });\n                return Object.values(lineGroup);\n            });\n            if (params.returnFields) {\n                return blockLines;\n            }\n            if (params.deepValues) {\n                const fresult = blockLines\n                    .map((block) => block\n                        .map((line) => line\n                            .map((field) => (\n                                field?.Value !== undefined && typeof field?.Value === 'object'\n                                    ? field.Value.Name : field?.Value))));\n                return fresult;\n            }\n            const fresult = blockLines\n                .map((block) => block.map((line) => line.map((field) => field.Value)));\n            return fresult;\n        }\n        return [];\n    };\n    return LogAction('$.valuesByPath', logic);\n};\n"]}