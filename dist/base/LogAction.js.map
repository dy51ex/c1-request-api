{"version":3,"file":"LogAction.js","sourceRoot":"","sources":["../../$/base/LogAction.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,2DAAmC;AAEnC,kBAAe,CAAU,IAAY,EAAE,KAA2B,EAAc,EAAE;IAC9E,IAAA,eAAK,EAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;IACnC,IAAI,MAAM,CAAC;IACX,IAAI;QACA,MAAM,GAAG,MAAM,KAAK,EAAE,CAAC;KAC1B;IAAC,OAAO,GAAG,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjB,IAAI,KAAa,CAAC;QAClB,IAAI;YACA,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;SAC/B;QAAC,WAAM;YACJ,KAAK,GAAG,GAAa,CAAC;SACzB;QACD,IAAA,eAAK,EAAC,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QACxC,MAAM,IAAI,KAAK,CAAC,UAAU,IAAI,MAAM,KAAK,EAAE,CAAC,CAAC;KAChD;IACD,IAAA,eAAK,EAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IACrD,OAAO,MAAM,CAAC;AAClB,CAAC,CAAA,CAAC","sourcesContent":["import debug from '../utils/debug';\n\nexport default async <T>(name: string, logic: () => T | Promise<T>): Promise<T> => {\n    debug('Info', name, 'started', '');\n    let result;\n    try {\n        result = await logic();\n    } catch (err) {\n        console.log(err);\n        let error: string;\n        try {\n            error = JSON.stringify(err);\n        } catch {\n            error = err as string;\n        }\n        debug('Error', name, 'progress', error);\n        throw new Error(`ERROR: ${name} - ${error}`);\n    }\n    debug('Info', name, 'ended', JSON.stringify(result));\n    return result;\n};\n"]}