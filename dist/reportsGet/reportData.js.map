{"version":3,"file":"reportData.js","sourceRoot":"","sources":["../../$/reportsGet/reportData.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,kEAA0C;AAC1C,kEAA0C;AAE1C;;;GAGG;AAEH,mBAA+B,MAK9B;;QACC,MAAM,KAAK,GAAG,GAAS,EAAE;;YACvB,MAAM,SAAS,GAAG,MAAM,IAAA,mBAAS,EAAiF;gBAChH,IAAI,EAAE,MAAM;gBACZ,GAAG,EAAE,kBAAkB;gBACvB,IAAI,EAAE,EAAE,gBAAgB,EAAE,MAAM,CAAC,gBAAgB,EAAE;aACpD,CAAC,CAAC;YACH,MAAM,eAAe,GAAG,MAAA,SAAS,CAAC,OAAO,mCAAI,EAAE,CAAC;YAChD,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,MAAA,MAAM,CAAC,OAAO,mCAAI,EAAE,CAAC,CAAC;YAC5D,MAAM,WAAW,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;gBAChD,MAAM,UAAU,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjF,IAAI,CAAC,UAAU,EAAE;oBACf,MAAM,8EAA8E,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;iBACjG;gBACD,IAAI,UAAU,CAAC,IAAI,KAAK,MAAM,EAAE;oBAC9B,OAAO;wBACL,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACxB,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,aAAa,EAAE,UAAU,CAAC,EAAE;qBAC7B,CAAC;iBACH;qBAAM;oBACL,OAAO;wBACL,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC;wBACvB,aAAa,EAAE,UAAU,CAAC,EAAE;qBAC7B,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;YACH,OAAO,IAAA,mBAAS,EAAmF;gBACjG,IAAI,EAAE,MAAM;gBACZ,GAAG,EAAE,iCAAiC;gBACtC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;aACtG,CAAC,CAAC;QACL,CAAC,CAAA,CAAC;QACF,OAAO,IAAA,mBAAS,EAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;IACrD,CAAC;CAAA;AAvCD,4BAuCC","sourcesContent":["import { components } from '../../types';\r\nimport c1request from '../base/c1request';\r\nimport LogAction from '../base/LogAction';\r\n\r\n/**\r\n * Возвращает данные отчета, с условиями фильтров, если передано\r\n * @example $.reportsGet.reportData({ ReportMetadataId: uuid, { Дата: ['2020-01-01', '2020-01-30'], 'Тип дела':['Продажи'] }})\r\n */\r\n\r\nexport default async function (params: {\r\n  ReportMetadataId: string;\r\n  Filters?: { [key: string]: string | string[] };\r\n  Page?: number | undefined;\r\n  PageSize?: number | undefined;\r\n}): Promise<components['schemas']['CaseMap.Modules.Reports.Response.ReportCellResponse'][][]> {\r\n  const logic = async () => {\r\n    const reportRun = await c1request<components['schemas']['CaseMap.Modules.Reports.Response.ReportResultResponse']>({\r\n      type: 'post',\r\n      url: '/api/Reports/Run',\r\n      body: { ReportMetadataId: params.ReportMetadataId },\r\n    });\r\n    const possibleFilters = reportRun.Filters ?? [];\r\n    const requestFilters = Object.entries(params.Filters ?? []);\r\n    const fullFilters = requestFilters.map((filter) => {\r\n      const filterData = possibleFilters.find((pFilter) => pFilter.Name === filter[0]);\r\n      if (!filterData) {\r\n        throw `$.ReportsGet.reportData(reportRun)(filterData) - no filter found by name - ${filter[0]}`;\r\n      }\r\n      if (filterData.Type === 'Date') {\r\n        return {\r\n          BeginValue: filter[1][0],\r\n          EndValue: filter[1][1],\r\n          ReportFieldId: filterData.Id,\r\n        };\r\n      } else {\r\n        return {\r\n          SearchValues: filter[1],\r\n          ReportFieldId: filterData.Id,\r\n        };\r\n      }\r\n    });\r\n    return c1request<components['schemas']['CaseMap.Modules.Reports.Response.ReportCellResponse'][][]>({\r\n      type: 'post',\r\n      url: '/api/Reports/GetFixedReportData',\r\n      body: Object.assign({ PageSize: 100 }, params ? Object.assign(params, { Filters: fullFilters }) : {}),\r\n    });\r\n  };\r\n  return LogAction('$.reportsGet.reportData', logic);\r\n}\r\n"]}