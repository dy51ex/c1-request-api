{"version":3,"file":"createDict.js","sourceRoot":"","sources":["../../$/dictionarySet/createDict.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,kEAA0C;AAC1C,kEAA0C;AAE1C;;;GAGG;AACH,kBAAe,CACX,MAAyH,EACpB,EAAE;IACvG,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,IAAA,mBAAS,EAA+F;QACxH,GAAG,EAAE,kCAAkC;QACvC,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,MAAM;KACf,CAAC,CAAC;IACH,OAAO,IAAA,mBAAS,EAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;AAC1D,CAAC,CAAA,CAAC","sourcesContent":["import { components } from '../../types';\nimport c1request from '../base/c1request';\nimport LogAction from '../base/LogAction';\n\n/**\n * Создает новый справочник\n * @example $.dictionarySet.createDict(dictStructure)\n */\nexport default async (\n    params: components['schemas']['CaseDotStar.ServicePackages.Dictionaries.Requests.V42.CreateUserDefinedDictionaryRequest'],\n): Promise<components['schemas']['CaseDotStar.ServicePackages.Common.Database.Data.DictionaryMetadata']> => {\n    const logic = () => c1request<components['schemas']['CaseDotStar.ServicePackages.Common.Database.Data.DictionaryMetadata']>({\n        url: '/api/Dictionary/CreateDictionary',\n        type: 'post',\n        body: params,\n    });\n    return LogAction('$.dictionarySet.createDict', logic);\n};\n"]}