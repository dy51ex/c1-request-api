{"version":3,"file":"dicts.js","sourceRoot":"","sources":["../../$/dictionaryGet/dicts.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,kEAA0C;AAC1C,kEAA0C;AAe1C,SAAe,KAAK,CAAC,QAAiB;;QAClC,MAAM,KAAK,GAAG,GAAS,EAAE;YACrB,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAS,EAAiG;gBAC7H,GAAG,EAAE,mCAAmC;gBACxC,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE;aACzE,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ;gBAAE,OAAO,QAAQ,CAAC;YAC/B,MAAM,aAAa,GAAG,MAAM,IAAA,mBAAS,EAAU;gBAC3C,GAAG,EAAE,oCAAoC;gBACzC,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE;oBACF,aAAa;oBACb,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU;oBACzC,YAAY,EAAE,IAAI;oBAClB,QAAQ,EAAE,GAAG;iBAChB;aACJ,CAAC,CAAC;YACH,MAAM,MAAM,GAAG;gBACX,aAAa;gBACb,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;gBACzB,aAAa;gBACb,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU;gBACzC,aAAa;gBACb,KAAK,EAAE,aAAa,CAAC,MAAM;aAK9B,CAAC;YACF,OAAO,MAAM,CAAC;QAClB,CAAC,CAAA,CAAC;QACF,OAAO,IAAA,mBAAS,EAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;IACrD,CAAC;CAAA;AACD,kBAAe,KAAK,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { components } from '../../types';\nimport c1request from '../base/c1request';\nimport LogAction from '../base/LogAction';\n\n/**\n * Получет список словарей без элементов, если передается\n * параметром низвание словаря - возвращает только его вместе с элементами\n * @example $.dictionaryGet.dicts(dictName)\n */\nasync function dicts(\n    dictName: string\n): Promise<{\n    Id: string;\n    SystemName: string;\n    Items: components['schemas']['CaseDotStar.ServicePackages.Dictionaries.DictionaryItemSummary'][];\n}>;\nasync function dicts(): Promise<components['schemas']['CaseDotStar.ServicePackages.Common.Database.Data.DictionaryMetadata'][]>;\nasync function dicts(dictName?: string) {\n    const logic = async () => {\n        const response = await c1request<components['schemas']['CaseDotStar.ServicePackages.Common.Database.Data.DictionaryMetadata'][]>({\n            url: '/api/Dictionary/GetDictionaryList',\n            type: 'post',\n            body: dictName ? { Name: dictName, PageSize: 999 } : { PageSize: 999 },\n        });\n        if (!dictName) return response;\n        const responseItems = await c1request<unknown>({\n            url: '/api/Dictionary/GetDictionaryItems',\n            type: 'post',\n            body: {\n                // @ts-ignore\n                SystemName: response.Result[0].SystemName,\n                WithSubItems: true,\n                PageSize: 999,\n            },\n        });\n        const result = {\n            // @ts-ignore\n            Id: response.Result[0].Id,\n            // @ts-ignore\n            SystemName: response.Result[0].SystemName,\n            // @ts-ignore\n            Items: responseItems.Result,\n        } as {\n            Id: string;\n            SystemName: string;\n            Items: components['schemas']['CaseDotStar.ServicePackages.Dictionaries.DictionaryItemSummary'][];\n        };\n        return result;\n    };\n    return LogAction('$.dictionaryGet.dicts', logic);\n}\nexport default dicts;\n"]}