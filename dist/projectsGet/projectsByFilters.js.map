{"version":3,"file":"projectsByFilters.js","sourceRoot":"","sources":["../../$/projectsGet/projectsByFilters.ts"],"names":[],"mappings":"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","sourcesContent":["import { components } from '../../types';\r\nimport c1request from '../base/c1request';\r\nimport LogAction from '../base/LogAction';\r\nimport projectClasses from '../projectsGet/projectClasses';\r\n\r\n/**\r\n * Фильтрует дела по указанным параметрам, возвращая массив отфильтрованных дел\r\n * @example $.projectsGet.projectsByFilters({'Направление': 'Продажи'}, 'Дело', 1, 20, 'Папка с делами')\r\n */\r\nexport default async function (\r\n  filterFields: { [key: string]: string | string[] },\r\n  projectClass: string,\r\n  page?: number,\r\n  pageSize?: number,\r\n  folderName?: string\r\n): Promise<components['schemas']['CaseMap.Modules.Projects.Responses.ProjectResponse'][]> {\r\n  const logic = async () => {\r\n    const filterNames = Object.keys(filterFields);\r\n    const defaultFilters = await c1request<components['schemas']['CaseMap.Modules.Common.Responses.DataFields.FieldResponse'][]>({\r\n      type: 'get',\r\n      url: '/api/ProjectFilter/GetDefaultFilters',\r\n    });\r\n\r\n    const filters = await Promise.all(filterNames.map(async (filterName) => {\r\n      const customFilters = await c1request<components['schemas']['CaseMap.Modules.Common.Responses.DataFields.FieldResponse'][]>(\r\n        {\r\n          type: 'post',\r\n          url: '/api/ProjectFilter/GetFilters',\r\n          body: { Name: filterName, PageSize: 1000 },\r\n        }\r\n      );\r\n      const allfilters = defaultFilters.concat(customFilters);\r\n      const filter = allfilters.find((filterEntry: any) => filterEntry.Name === filterName);\r\n      if (!filter) throw `$.projectsGet.projectsByFilters - no filter with name ${filterName} found`;\r\n      const responseFilterItems = await c1request<components['schemas']['CaseMap.Modules.Projects.Interfaces.Responses.Filter.FilterSuggestResponse'][]>(\r\n        {\r\n          type: 'post',\r\n          url: '/api/ProjectFilter/GetFilterSuggest',\r\n          body: { FilterId: filter.Id, Name: filterFields[filterName], PageSize: 1000 },\r\n        }\r\n      );\r\n      return Object.assign(filter, { Items: responseFilterItems });\r\n    }));\r\n    const prepareFilters = filters\r\n      .filter((filter) => filter.Type !== 'Date')\r\n      .map((filter) => ({\r\n        DataField: { Id: filter.Id },\r\n        SearchValues: filter.Items.filter((item: any) => filterFields[filter.Name ?? ''].includes(item.Name ?? '')).map(\r\n          (item: any) => item.Id\r\n        ),\r\n      }));\r\n    const prepareFiltersDate = filters\r\n      .filter((f) => f.Type === 'Date')\r\n      .map((filter) => ({\r\n        DataField: { Id: filter.Id },\r\n        SearchValues: [false],\r\n        BeginValue: filterFields[filter.Name ?? ''],\r\n        EndValue: filterFields[filter.Name ?? ''],\r\n      }));\r\n    const prepareClasses = await projectClasses(projectClass);\r\n    if (!prepareClasses) throw `$.projectsGet.projectsByFilters - no classes found`;\r\n    const filter = { Filters: [...prepareFilters, ...prepareFiltersDate], ObjectClassId: prepareClasses.Id };\r\n\r\n    const groupedProjects = await c1request<components['schemas']['CaseMap.Modules.Projects.Responses.GroupedProjectResponse'][]>(\r\n      {\r\n        type: 'post',\r\n        url: '/api/Projects/GetGroupedProjects',\r\n        body: Object.assign(filter, { Page: page || 1, PageSize: pageSize || 20 }),\r\n      }\r\n    );\r\n\r\n    if (!folderName) {\r\n      const res = groupedProjects.map((entry) => entry.Projects).flat();\r\n      return res || [] as typeof res;\r\n    }\r\n    const projects = groupedProjects.find(\r\n      (elem) => elem?.ProjectGroupResponse?.Name === (folderName === 'Все дела' ? 'Дела' : folderName)\r\n    );\r\n    const projectsProjects = projects?.Projects;\r\n    return projects?.Projects || [] as typeof projectsProjects;\r\n  };\r\n  // @ts-ignore\r\n  return LogAction('$.projectsGet.projectClasses', logic);\r\n}\r\n"]}