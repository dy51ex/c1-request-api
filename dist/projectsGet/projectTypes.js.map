{"version":3,"file":"projectTypes.js","sourceRoot":"","sources":["../../$/projectsGet/projectTypes.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,kEAA0C;AAC1C,kEAA0C;AAU1C,SAAe,YAAY,CAAC,eAAwB;;QAChD,MAAM,KAAK,GAAG,GAAS,EAAE;YACrB,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAS,EAAoF;gBAChH,IAAI,EAAE,MAAM;gBACZ,GAAG,EAAE,mCAAmC;gBACxC,IAAI,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE;aAC1B,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YAC/B,IAAI,eAAe,EAAE;gBACjB,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,eAAe,CAAC,CAAC;gBAChF,IAAI,CAAC,WAAW;oBAAE,MAAM,gDAAgD,eAAe,EAAE,CAAC;gBAC1F,MAAM,gBAAgB,GAAG,MAAM,IAAA,mBAAS,EAAkF;oBACtH,IAAI,EAAE,KAAK;oBACX,GAAG,EAAE,iEAAiE,WAAW,CAAC,EAAE,EAAE;iBACzF,CAAC,CAAC;gBACH,OAAO,gBAAgB,CAAC;aAC3B;YACD,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAC3B,CAAC,IAAS,EAAE,EAAE,CAAC,IAAA,mBAAS,EAAkF;gBACtG,IAAI,EAAE,KAAK;gBACX,GAAG,EAAE,iEAAiE,IAAI,CAAC,EAAE,EAAE;aAClF,CAAC,CACL,CAAC,CAAC;QACP,CAAC,CAAA,CAAC;QAEF,OAAO,IAAA,mBAAS,EAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;IAC7D,CAAC;CAAA;AACD,kBAAe,YAAY,CAAC","sourcesContent":["import { components } from '../../types';\nimport c1request from '../base/c1request';\nimport LogAction from '../base/LogAction';\n\n/**\n * Возвращает все типы дел в виде массива, если передано название типа - только его\n * @example $.projectsGet.projectTypes(projectTypeName)\n */\nasync function projectTypes(\n    projectTypeName: string\n): Promise<components['schemas']['CaseMap.Modules.Projects.Responses.ProjectTypeResponse']>;\nasync function projectTypes(): Promise<components['schemas']['CaseMap.Modules.Projects.Responses.ProjectTypeResponse'][]>;\nasync function projectTypes(projectTypeName?: string) {\n    const logic = async () => {\n        const response = await c1request<components['schemas']['CaseMap.Modules.Projects.Responses.ProjectTypeResponse'][]>({\n            type: 'post',\n            url: '/api/ProjectTypes/GetProjectTypes',\n            body: { PageSize: 999 },\n        });\n        console.log(1231231, response);\n        if (projectTypeName) {\n            const projectType = response.find((type: any) => type.Name === projectTypeName);\n            if (!projectType) throw `$.projectsGet.projectTypes - no type named - ${projectTypeName}`;\n            const responseDetailed = await c1request<components['schemas']['CaseMap.Modules.Projects.Responses.ProjectTypeResponse']>({\n                type: 'get',\n                url: `/api/ProjectTypes/GetProjectType/GetProjectType?projectTypeId=${projectType.Id}`,\n            });\n            return responseDetailed;\n        }\n        return Promise.all(response.map(\n            (type: any) => c1request<components['schemas']['CaseMap.Modules.Projects.Responses.ProjectTypeResponse']>({\n                type: 'get',\n                url: `/api/ProjectTypes/GetProjectType/GetProjectType?projectTypeId=${type.Id}`,\n            }),\n        ));\n    };\n\n    return LogAction('$.projectsGet.projectSettings', logic);\n}\nexport default projectTypes;\n"]}