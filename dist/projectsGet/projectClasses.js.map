{"version":3,"file":"projectClasses.js","sourceRoot":"","sources":["../../$/projectsGet/projectClasses.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,kEAA0C;AAE1C,kEAA0C;AAU1C,SAAe,cAAc,CAAC,SAAkB;;QAC9C,MAAM,KAAK,GAAG,GAAS,EAAE;YACvB,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAS,EAAuG;gBACrI,IAAI,EAAE,KAAK;gBACX,GAAG,EAAE,qCAAqC;aAC3C,CAAC,CAAC;YACH,IAAI,SAAS;gBAAE,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,WAAgB,EAAE,EAAE,CAAC,SAAS,KAAK,WAAW,CAAC,IAAI,CAAC,CAAC;YAC1F,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAA,CAAC;QAEF,OAAO,IAAA,mBAAS,EAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;IAC1D,CAAC;CAAA;AACD,kBAAe,cAAc,CAAC","sourcesContent":["import { components } from '../../types';\r\nimport c1request from '../base/c1request';\r\nimport Request from '../base/c1request';\r\nimport LogAction from '../base/LogAction';\r\n\r\n/**\r\n * Возвращает классы обьекта в виде массива, если пенедно назнвание класса, возвращает только его\r\n * @example $.projectsGet.projectClasses(projectId, 'allTabs')\r\n */\r\nasync function projectClasses(\r\n  className: string\r\n): Promise<components['schemas']['CaseMap.Modules.Projects.BusinessDAL.App.ObjectClasses.Dto.ObjectClassDto']>;\r\nasync function projectClasses(): Promise<components['schemas']['CaseMap.Modules.Projects.BusinessDAL.App.ObjectClasses.Dto.ObjectClassDto'][]>;\r\nasync function projectClasses(className?: string) {\r\n  const logic = async () => {\r\n    const response = await c1request<components['schemas']['CaseMap.Modules.Projects.BusinessDAL.App.ObjectClasses.Dto.ObjectClassDto'][]>({\r\n      type: 'get',\r\n      url: '/api/ObjectClasses/GetObjectClasses',\r\n    });\r\n    if (className) return response.find((classObject: any) => className === classObject.Name);\r\n    return response;\r\n  };\r\n\r\n  return LogAction('$.projectsGet.projectClasses', logic);\r\n}\r\nexport default projectClasses;\r\n"]}