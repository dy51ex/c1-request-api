{"version":3,"file":"valuesByName.js","sourceRoot":"","sources":["../../$/projectsBlocksGet/valuesByName.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,kEAA0C;AAC1C,kEAA0C;AAC1C,gEAAwC;AA+BxC;;;;;GAKG;AACH,SAAe,YAAY,CACvB,OAAgH,EAChH,MAMC;;QAED,MAAM,KAAK,GAAG,GAAS,EAAE;YACrB,MAAM,KAAK,GAAG,MAAM,IAAA,qBAAW,EAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACjD,6DAA6D;YAC7D,aAAa;YACb,MAAM,MAAM,GAAG,MAAM,IAAA,sBAAY,EAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YACxF,OAAO,MAAuG,CAAC;QACnH,CAAC,CAAA,CAAC;QACF,OAAO,IAAA,mBAAS,EAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;IAChE,CAAC;CAAA;AACD,kBAAe,YAAY,CAAC","sourcesContent":["import { components, Field } from '../../types';\nimport LogAction from '../base/LogAction';\nimport valuesByPath from './valuesByPath';\nimport pathsByName from './pathsByName';\n\nasync function valuesByName(\n    project: components['schemas']['CaseMap.Modules.Projects.Responses.VisualBlocks.ProjectAllVisualBlocksResponse'],\n    params: { fieldNames: string[]; blockName?: string }\n): Promise<Field['Value'][]>;\nasync function valuesByName(\n    project: components['schemas']['CaseMap.Modules.Projects.Responses.VisualBlocks.ProjectAllVisualBlocksResponse'],\n    params: { fieldNames: string[]; blockName?: string; deepValues: true }\n): Promise<any[]>;\nasync function valuesByName(\n    project: components['schemas']['CaseMap.Modules.Projects.Responses.VisualBlocks.ProjectAllVisualBlocksResponse'],\n    params: { grouping: 'blocks' | 'lines'; returnFields: true; fieldNames: string[]; blockName?: string }\n): Promise<Field[][]>;\nasync function valuesByName(\n    project: components['schemas']['CaseMap.Modules.Projects.Responses.VisualBlocks.ProjectAllVisualBlocksResponse'],\n    params: { grouping: 'blocks' | 'lines'; fieldNames: string[]; blockName?: string }\n): Promise<Field['Value'][][]>;\nasync function valuesByName(\n    project: components['schemas']['CaseMap.Modules.Projects.Responses.VisualBlocks.ProjectAllVisualBlocksResponse'],\n    params: { grouping: 'blocks' | 'lines'; fieldNames: string[]; blockName?: string; deepValues: true }\n): Promise<[string | boolean | number][]>;\nasync function valuesByName(\n    project: components['schemas']['CaseMap.Modules.Projects.Responses.VisualBlocks.ProjectAllVisualBlocksResponse'],\n    params: {\n        grouping?: 'blocksLines';\n        returnFields: true;\n        fieldNames: string[];\n        blockName?: string;\n    }\n): Promise<Field[][][]>;\n/**\n * Совершает поиск значений поля по его имени, возвращает массив результатов в\n * зависимости от параметров, например ['Значение1', 'Значение2']\n * @example $.projectsBlocksGet.valuesByName(form,\n * { fieldNames: ['Поле 1', 'Поле 2'] , blockName: 'Новый блок', deepValues: true })\n */\nasync function valuesByName(\n    project: components['schemas']['CaseMap.Modules.Projects.Responses.VisualBlocks.ProjectAllVisualBlocksResponse'],\n    params: {\n        fieldNames: string[];\n        blockName?: string;\n        grouping?: 'blocks' | 'lines' | 'blocksLines';\n        returnFields?: boolean;\n        deepValues?: boolean;\n    },\n): Promise<Field['Value'][] | [string | boolean | number] | Field['Value'][][] | Field[][] | Field[][][]> {\n    const logic = async () => {\n        const paths = await pathsByName(project, params);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const values = await valuesByPath(project, Object.assign(params, { fieldPath: paths }));\n        return values as Field['Value'][] | [string | boolean | number] | Field['Value'][][] | Field[][] | Field[][][];\n    };\n    return LogAction('$.projectsBlocksGet.valuesByName', logic);\n}\nexport default valuesByName;\n"]}