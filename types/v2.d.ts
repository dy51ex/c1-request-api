/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v2/auth/token": {
    /** Returns access token information. */
    post: {
      responses: {
        /** Access token information */
        200: {
          content: {
            "application/json": components["schemas"]["CaseDotStar.Shell.Models.Token"];
          };
        };
        /** Obtain or refresh access token error */
        400: {
          content: {
            "application/json": components["schemas"]["CaseDotStar.Shell.Models.TokenError"];
          };
        };
      };
      /** Obtain or refresh access token request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseDotStar.Shell.Models.TokenRequest"];
        };
      };
    };
  };
  "/api/v2/auth/wintoken": {
    /** Returns access token information. */
    post: {
      responses: {
        /** Access token information */
        200: {
          content: {
            "application/json": components["schemas"]["CaseDotStar.Shell.Models.Token"];
          };
        };
        /** Obtain access token error */
        400: {
          content: {
            "application/json": components["schemas"]["CaseDotStar.Shell.Models.TokenError"];
          };
        };
      };
    };
  };
  "/api/v2/calls": {
    /** Create call */
    post: {
      responses: {
        /** Created call */
        201: {
          content: {
            "application/json": components["schemas"]["CaseMap.Modules.Calls.Models.CallDto"];
          };
        };
        /** Call already exists or specified module inactive */
        400: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Request to create call */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.Modules.Calls.Commands.CreateCall"];
        };
      };
    };
  };
  "/api/v2/calls/uploadRecording": {
    /** Upload recording of call */
    post: {
      responses: {
        /** Uploaded file info */
        200: {
          content: {
            "application/json": components["schemas"]["CaseDotStar.ServicePackages.Common.FileSummary"];
          };
        };
      };
    };
  };
  "/api/v2/calls/{id}/attachRecording": {
    /** Attach recording to call */
    put: {
      parameters: {
        path: {
          /** Id of call */
          id: string;
        };
      };
      responses: {
        /** Recording successfully attached to call */
        204: never;
        /** Specified call not found */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Recording info */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Calls.AttachRecordingRequest"];
        };
      };
    };
  };
  "/api/v2/calls/sendNotification": {
    /** Send notification about beginning of call */
    post: {
      responses: {
        /** Notification successfully sent to user */
        204: never;
        /** Specified module inactive */
        400: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Notification info */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.Modules.Calls.Commands.SendNotification"];
        };
      };
    };
  };
  "/api/v2/dictionaries": {
    /** Returns all dictionaries. */
    get: {
      responses: {
        /** Dictionaries */
        200: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Dictionaries.Dictionary>"];
          };
        };
        /** Insufficient permissions to Dictionaries section */
        403: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/v2/dictionaries/{id}": {
    /** Returns specified dictionary. */
    get: operations["GetDictionary"];
  };
  "/api/v2/dictionaries/{id}/values": {
    /** Returns dictionary values. */
    get: operations["GetDictionaryValues"];
  };
  "/api/v2/dictionaries/{id}/values/{valueId}": {
    /** Returns dictionary value. */
    get: operations["GetDictionaryValue"];
  };
  "/api/v2/download/{id}": {
    /** Downloads file from the server */
    get: operations["Download"];
  };
  "/api/v2/events": {
    /** Returns events */
    get: operations["GetEvents"];
    /** Create event with additional attributes */
    post: {
      responses: {
        /** Created event */
        201: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Events.EventDetails"];
          };
        };
        /** Insufficient permissions to Events section */
        403: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Request to create event */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Events.CreateOrUpdateEventRequest"];
        };
      };
    };
  };
  "/api/v2/events/{id}": {
    /** Returns detailed information about specified event */
    get: operations["GetEvent"];
    /** Update event with additional attributes */
    put: {
      parameters: {
        path: {
          /** Id of event */
          id: string;
        };
      };
      responses: {
        /** Updated event */
        200: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Events.EventDetails"];
          };
        };
        /** Insufficient permissions to Events section */
        403: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
        /** Specified event not found or not enough permissions to edit specified event */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Request to update event */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Events.CreateOrUpdateEventRequest"];
        };
      };
    };
    /** Delete event */
    delete: {
      parameters: {
        path: {
          /** Id of event */
          id: string;
        };
      };
      responses: {
        /** Event successfully deleted */
        204: never;
        /** Insufficient permissions to Events section */
        403: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
        /** Specified event not found or not enough permissions to edit specified event */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/v2/eventTypes": {
    /** Returns all event types */
    get: operations["GetEventTypes"];
  };
  "/api/v2/eventTypes/{id}": {
    /** Returns detailed information about specified event type */
    get: operations["GetEventType"];
  };
  "/api/v2/folders": {
    /** Returns folders. */
    get: operations["GetFolders"];
  };
  "/api/v2/folders/{id}": {
    /** Returns specified folder, folder contains projects and cases. */
    get: operations["GetFolder"];
  };
  "/api/v2/health": {
    /** Returns information about current health status of service. */
    get: {
      parameters: {
        query: {
          /** Token to allow check DB health */
          DbToken?: string | null;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Health.HealthCheckResult"];
          };
        };
      };
    };
  };
  "/api/v2/legalForms": {
    /** Returns all legal forms. */
    get: operations["GetLegalForms"];
  };
  "/api/v2/legalForms/{id}": {
    /** Returns detailed information about specified legal form. */
    get: operations["GetLegalForm"];
  };
  "/api/v2/objectClasses": {
    /** Returns object classes. */
    get: operations["GetObjectClasses"];
  };
  "/api/v2/objectClasses/{id}": {
    /** Returns specified object class. */
    get: operations["GetObjectClass"];
  };
  "/api/v2/cases": {
    /** Returns objects. */
    get: operations["GetCases"];
  };
  "/api/v2/objects": {
    /** Returns objects. */
    get: operations["GetObjects"];
    /** Create object with blocks */
    post: {
      responses: {
        /** Created object */
        201: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Cases.V2.CaseWithTaggedFields"];
          };
        };
        /** Invalid request */
        400: unknown;
      };
      /** Request to create object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Cases.V2.CreateCaseWithTaggedFieldsRequest"];
        };
      };
    };
  };
  "/api/v2/cases/{id}/archive": {
    /** Archive object */
    post: {
      parameters: {
        path: {
          /** Id of object */
          id: string;
        };
      };
      responses: {
        /** Object successfully archived or object already been archived */
        204: never;
        /** Specified object not found or not enough permissions to edit specified object */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/v2/objects/{id}/archive": {
    /** Archive object */
    post: {
      parameters: {
        path: {
          /** Id of object */
          id: string;
        };
      };
      responses: {
        /** Object successfully archived or object already been archived */
        204: never;
        /** Specified object not found or not enough permissions to edit specified object */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/v2/cases/{id}/restore": {
    /** Restore archived object */
    post: {
      parameters: {
        path: {
          /** Id of object */
          id: string;
        };
      };
      responses: {
        /** Object successfully restored or object is not archived */
        204: never;
        /** Specified object not found or not enough permissions to edit specified object */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/v2/objects/{id}/restore": {
    /** Restore archived object */
    post: {
      parameters: {
        path: {
          /** Id of object */
          id: string;
        };
      };
      responses: {
        /** Object successfully restored or object is not archived */
        204: never;
        /** Specified object not found or not enough permissions to edit specified object */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/v2/cases/{id}": {
    /** Delete archived object */
    delete: {
      parameters: {
        path: {
          /** Id of object */
          id: string;
        };
      };
      responses: {
        /** Object successfully deleted */
        204: never;
        /** An active object cannot be deleted, archive object first */
        400: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
        /** Specified object not found or not enough permissions to edit specified object */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/v2/objects/{id}": {
    /** Returns detailed information about specified object. */
    get: operations["GetCaseV2"];
    /** Update object with blocks */
    put: {
      parameters: {
        path: {
          /** Id of object */
          id: string;
        };
      };
      responses: {
        /** Updated object */
        200: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Cases.V2.CaseWithTaggedFields"];
          };
        };
        /** Invalid request */
        400: unknown;
        /** Specified object not found or not enough permissions to edit specified object */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Request to update object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Cases.V2.UpdateCaseWithTaggedFieldsRequest"];
        };
      };
    };
    /** Delete archived object */
    delete: {
      parameters: {
        path: {
          /** Id of object */
          id: string;
        };
      };
      responses: {
        /** Object successfully deleted */
        204: never;
        /** An active object cannot be deleted, archive object first */
        400: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
        /** Specified object not found or not enough permissions to edit specified object */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
    };
    /** Patch object with blocks */
    patch: {
      parameters: {
        path: {
          /** Id of object */
          id: string;
        };
      };
      responses: {
        /** Patched object */
        200: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Cases.V2.CaseWithTaggedFields"];
          };
        };
        /** Invalid request */
        400: unknown;
        /** Not enough rights exist for editing blocks */
        403: unknown;
        /** Specified object not found or not enough permissions to edit specified object */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Request to patch object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Cases.V2.PatchCaseWithTaggedFieldsRequest"];
        };
      };
    };
  };
  "/api/v2/cases/{id}/participants": {
    /** Add a participant to the object and (optional) set a role in the object */
    post: {
      parameters: {
        path: {
          /** Id of object */
          id: string;
        };
      };
      responses: {
        /** A participant with this role is already in the object. */
        400: unknown;
        /** The current user does not have permission to perform the operation. */
        403: unknown;
        /** Specified object not found or not enough permissions to edit specified object or not found participant or role */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Request to add participant to the object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Cases.AddParticipantToCaseRequest"];
        };
      };
    };
  };
  "/api/v2/objects/{id}/participants": {
    /** Add a participant to the object and (optional) set a role in the object */
    post: {
      parameters: {
        path: {
          /** Id of object */
          id: string;
        };
      };
      responses: {
        /** A participant with this role is already in the object. */
        400: unknown;
        /** The current user does not have permission to perform the operation. */
        403: unknown;
        /** Specified object not found or not enough permissions to edit specified object or not found participant or role */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Request to add participant to the object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Cases.AddParticipantToCaseRequest"];
        };
      };
    };
  };
  "/api/v2/caseTypes": {
    /** Returns all object types. */
    get: operations["GetCaseTypes"];
  };
  "/api/v2/objectTypes": {
    /** Returns all object types. */
    get: operations["GetObjectTypes"];
  };
  "/api/v2/caseTypes/{id}": {
    /** Returns detailed information about specified object type, object type contains metadata of objects. */
    get: operations["GetCaseType"];
  };
  "/api/v2/objectTypes/{id}": {
    /** Returns detailed information about specified object type, object type contains metadata of objects. */
    get: operations["ObjectType"];
  };
  "/api/v2/participants": {
    /** Returns participants */
    get: operations["GetParticipants"];
    /** Create participant with additional attributes */
    post: {
      responses: {
        /** Created participant */
        201: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Participants.ParticipantDetails"];
          };
        };
        /** Invalid request */
        400: unknown;
        /** Insufficient permissions to Participants section */
        403: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Request to create participant */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Participants.CreateParticipantRequest"];
        };
      };
    };
  };
  "/api/v2/participants/{id}": {
    /** Returns detailed information about specified participant */
    get: operations["GetParticipant"];
    /** Patch participant with additional attributes */
    patch: {
      parameters: {
        path: {
          /** Id of participant */
          id: string;
        };
      };
      responses: {
        /** Patched participant */
        200: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Participants.ParticipantDetails"];
          };
        };
        /** Invalid request */
        400: unknown;
        /** Insufficient permissions to Participants section */
        403: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
        /** Specified participant not found or not enough permissions to edit specified participant */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Request to patch participant */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Participants.PatchParticipantRequest"];
        };
      };
    };
  };
  "/api/v2/projects": {
    /** Returns projects. */
    get: operations["GetProjects"];
  };
  "/api/v2/projects/{id}": {
    /** Returns specified project, project contains cases. */
    get: operations["GetProject"];
  };
  "/api/v2/objects/{objectId}/relatedObjects": {
    get: operations["GetRelatedObjects"];
    post: {
      parameters: {
        path: {
          /** Identifier of parent object */
          objectId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.IActionResult"];
          };
        };
        /** Relationship successfully created */
        201: {
          content: {
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.IActionResult"];
          };
        };
        /** Specified object not found or not enough permissions */
        404: unknown;
      };
      /** Related object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.RelatedObjects.CreateRelatedObjectRequest"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** Identifier of parent object */
          objectId: string;
        };
        query: {
          /** Identifier of linked object */
          toObjectId?: string | null;
          /** Name of linked object */
          name?: string | null;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Relationship successfully deleted */
        204: never;
        /** Specified object not found or not enough permissions */
        404: unknown;
      };
    };
  };
  "/api/v2/rolesInCase": {
    /** Returns all roles in the case */
    get: operations["GetRolesInCase"];
  };
  "/api/v2/rolesInCase/{id}": {
    /** Returns detailed information about specified role in the case */
    get: operations["GetRoleInCase"];
  };
  "/api/v2/scripts/run": {
    /** Runs the script. To avoid performance problems, we recommend running scripts asynchronously. To run the script asynchronously set the parameter IsAsync to true. */
    post: {
      parameters: {
        query: {
          /** Script name */
          name?: string | null;
        };
      };
      responses: {
        /** Result of script */
        200: {
          content: {
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.IActionResult"];
          };
        };
        /** Script scheduled for execution */
        202: {
          content: {
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.IActionResult"];
          };
        };
        /** Insufficient permissions to Workflow section */
        403: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
        /** Specified script not found */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
        /** Too many scripts are running. Wait and repeat request. See Retry-After header for recommended delay (in seconds) */
        429: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Data for the script */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Scripts.ScriptRequest"];
        };
      };
    };
  };
  "/api/v2/taskPriorities": {
    /** Returns all task priorities. */
    get: operations["GetTaskPriorities"];
  };
  "/api/v2/taskPriorities/{id}": {
    /** Returns detailed information about specified task priority. */
    get: operations["GetTaskPriority"];
  };
  "/api/v2/tasks": {
    /** Returns tasks */
    get: operations["GetTasks"];
    /** Create task with additional attributes */
    post: {
      responses: {
        /** Created task */
        201: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Tasks.TaskDetails"];
          };
        };
        /** Insufficient permissions to Tasks section */
        403: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Request to create task */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Tasks.CreateOrUpdateTaskRequest"];
        };
      };
    };
  };
  "/api/v2/tasks/{id}": {
    /** Returns detailed information about specified task */
    get: operations["GetTask"];
    /** Update task with additional attributes */
    put: {
      parameters: {
        path: {
          /** Id of task */
          id: string;
        };
      };
      responses: {
        /** Updated task */
        200: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Tasks.TaskDetails"];
          };
        };
        /** Insufficient permissions to Tasks section */
        403: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
        /** Specified task not found or not enough permissions to edit specified task */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
      /** Request to update task */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Tasks.CreateOrUpdateTaskRequest"];
        };
      };
    };
    /** Delete task */
    delete: {
      parameters: {
        path: {
          /** Id of task */
          id: string;
        };
      };
      responses: {
        /** Task successfully deleted */
        204: never;
        /** Insufficient permissions to Tasks section */
        403: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
        /** Specified task not found or not enough permissions to edit specified task */
        404: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/v2/taskStatuses": {
    /** Returns all task statuses */
    get: operations["GetTaskStatuses"];
  };
  "/api/v2/taskStatuses/{id}": {
    /** Returns detailed information about specified task status */
    get: operations["GetTaskStatus"];
  };
  "/api/v2/taskTypes": {
    /** Returns all task types */
    get: operations["GetTaskTypes"];
  };
  "/api/v2/taskTypes/{id}": {
    /** Returns detailed information about specified task type */
    get: operations["GetTaskType"];
  };
  "/api/v2/upload": {
    /** Uploads file to the server */
    post: {
      responses: {
        /** File successfully uploaded */
        200: {
          content: {
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.IActionResult"];
          };
        };
        /** Error while uploading file */
        500: {
          content: {
            "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/v2/users": {
    /** Returns users. */
    get: operations["GetUsers"];
  };
  "/api/v2/users/{id}": {
    /** Returns specified user. */
    get: operations["GetUser"];
  };
}

export interface components {
  schemas: {
    /** Grant type */
    "CaseDotStar.Shell.Auth.GrantType": "password" | "refresh_token";
    /** Request to obtain or refresh access token */
    "CaseDotStar.Shell.Models.TokenRequest": {
      grant_type: components["schemas"]["CaseDotStar.Shell.Auth.GrantType"];
      /** User name */
      username?: string | null;
      /** Password */
      password?: string | null;
      /** Refresh token */
      refresh_token?: string | null;
    };
    /** Token obtaining error code */
    "CaseDotStar.Shell.Models.TokenErrorCode":
      | "invalid_request"
      | "invalid_grant"
      | "unsupported_grant_type";
    /** Describes obtain or refresh token error */
    "CaseDotStar.Shell.Models.TokenError": {
      error: components["schemas"]["CaseDotStar.Shell.Models.TokenErrorCode"];
      /** Human-readable error description */
      error_description?: string | null;
    };
    /** Type of token */
    "CaseDotStar.Shell.Models.TokenType": "bearer";
    /** Access token information */
    "CaseDotStar.Shell.Models.Token": {
      /** Access token */
      access_token: string;
      token_type: components["schemas"]["CaseDotStar.Shell.Models.TokenType"];
      /** Lifetime in seconds of access token */
      expires_in: number;
      /** Refresh token, wich can be used to obtain new access token */
      refresh_token?: string | null;
    };
    "CaseDotStar.ServicePackages.Common.Models.Calls.CallType":
      | "Inbound"
      | "Outbound"
      | "Missed";
    "CaseDotStar.ServicePackages.Common.Models.Calls.ContactDto": {
      /** Phone number of contact */
      Phone: string;
      /** Name of contact */
      Name?: string | null;
    };
    "CaseMap.Modules.Calls.Models.UserType": "None" | "User" | "Unknown";
    "CaseMap.Modules.Calls.Models.UserDto": {
      /** Id of user if presents */
      Id?: string | null;
      /** Name of user */
      Name?: string | null;
      Type: components["schemas"]["CaseMap.Modules.Calls.Models.UserType"];
    };
    "CaseDotStar.ServicePackages.Common.Dto.IdNameObjectDto": {
      /** Unique identifier. */
      Id?: string | null;
      /** Display name. */
      Name?: string | null;
    };
    "CaseMap.Modules.Calls.Commands.CreateCall": {
      /** Module used to make call */
      ModuleId?: string | null;
      /** External id of call */
      ExternalId?: string | null;
      /** Id of call */
      Id?: string | null;
      /** Start date and time of call in UTC */
      StartDate: string;
      Type: components["schemas"]["CaseDotStar.ServicePackages.Common.Models.Calls.CallType"];
      Contact: components["schemas"]["CaseDotStar.ServicePackages.Common.Models.Calls.ContactDto"];
      User?: components["schemas"]["CaseMap.Modules.Calls.Models.UserDto"];
      /** Duration of call in seconds */
      Duration?: number | null;
      Project?: components["schemas"]["CaseDotStar.ServicePackages.Common.Dto.IdNameObjectDto"];
      /** Description of call */
      Description?: string | null;
      Recording?: components["schemas"]["CaseDotStar.ServicePackages.Common.Dto.IdNameObjectDto"];
    };
    "CaseMap.Modules.Calls.Models.CallDto": {
      /** Id of call */
      Id?: string | null;
      /** Start date and time of call in UTC */
      StartDate: string;
      Type: components["schemas"]["CaseDotStar.ServicePackages.Common.Models.Calls.CallType"];
      Contact: components["schemas"]["CaseDotStar.ServicePackages.Common.Models.Calls.ContactDto"];
      User?: components["schemas"]["CaseMap.Modules.Calls.Models.UserDto"];
      /** Duration of call in seconds */
      Duration?: number | null;
      Project?: components["schemas"]["CaseDotStar.ServicePackages.Common.Dto.IdNameObjectDto"];
      /** Description of call */
      Description?: string | null;
      Recording?: components["schemas"]["CaseDotStar.ServicePackages.Common.Dto.IdNameObjectDto"];
    };
    /** Response with infromation about error */
    "CaseMap.PublicApi.Errors.ErrorResponse": {
      /** Human-readable error desctipion */
      Error: string;
      /** System type of error */
      ErrorType: string;
    };
    /** File modem */
    "CaseDotStar.ServicePackages.Common.FileSummary": {
      /** Identifier */
      Id?: string;
      /** Identifier in storage */
      StorageFileId?: string | null;
      /** Name */
      Name?: string | null;
      /** Size of file in bytes */
      FileSize?: number;
      /** Extension of file */
      Extension?: string | null;
    };
    /** Request to attach recording to call */
    "CaseMap.PublicApi.Calls.AttachRecordingRequest": {
      /** Id of file of recording */
      RecordingId: string;
    };
    /** Notice of the beginning of the call */
    "CaseMap.Modules.Calls.Commands.SendNotification": {
      /** External id of call */
      ExternalId: string;
      /** Id of application through which the call is made */
      ModuleId: string;
      /** Id of user to whom the notification is sent */
      UserId: string;
      Type: components["schemas"]["CaseDotStar.ServicePackages.Common.Models.Calls.CallType"];
      Contact: components["schemas"]["CaseDotStar.ServicePackages.Common.Models.Calls.ContactDto"];
    };
    /** Dictionary */
    "CaseMap.PublicApi.Dictionaries.Dictionary": {
      /** Name of dictionary */
      Name: string;
      /** System name of dictionary */
      SysName?: string | null;
      /** Url to get dictionary values */
      ValuesUrl?: string | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Dictionaries.Dictionary>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.Dictionaries.Dictionary"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Dictionary value */
    "CaseMap.PublicApi.Dictionaries.DictionaryValue": {
      /** Value */
      Value: string;
      /** System name of value */
      SysName?: string | null;
      /** Id of parent value */
      ParentId?: string | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Dictionaries.DictionaryValue>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.Dictionaries.DictionaryValue"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    "Microsoft.AspNetCore.Mvc.IActionResult": { [key: string]: unknown };
    /** Base class for entities */
    "CaseMap.PublicApi.Entity": {
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Types of event attendee */
    "CaseMap.PublicApi.Events.EventAttendeeType":
      | "Email"
      | "Participant"
      | "User";
    /** Attendee */
    "CaseMap.PublicApi.Events.Attendee": {
      /** Id of entity */
      Id?: string | null;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
      /** Entity Id */
      EntityId?: string | null;
      Type: components["schemas"]["CaseMap.PublicApi.Events.EventAttendeeType"];
      /** Email */
      Email?: string | null;
    };
    /** Event */
    "CaseMap.PublicApi.Events.Event": {
      /** Name */
      Name?: string | null;
      /** Description */
      Description?: string | null;
      /** Start date */
      StartDate: string;
      /** End date */
      EndDate: string;
      /** Is all day event */
      AllDay: boolean;
      Type?: components["schemas"]["CaseMap.PublicApi.Entity"];
      Case?: components["schemas"]["CaseMap.PublicApi.Entity"];
      /** Attendees */
      Attendees: components["schemas"]["CaseMap.PublicApi.Events.Attendee"][];
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Events.Event>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.Events.Event"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Type (name) of task */
    "CaseMap.PublicApi.EventTypes.EventType": {
      /** Name */
      Name?: string | null;
      /** System name */
      SysName?: string | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Line of block */
    "CaseMap.PublicApi.Blocks.Line": {
      /** Id of line, client-side generated UUID */
      Id: string;
    };
    /** List of lines grouped by line metadata */
    "CaseMap.PublicApi.Blocks.LinesGroup": {
      /** Id of line metadata CaseMap.PublicApi.Blocks.LineMetadata.Id */
      LineMetadataId: string;
      /** List of grouped lines */
      Items: components["schemas"]["CaseMap.PublicApi.Blocks.Line"][];
      /** Id of block metadata CaseMap.PublicApi.Blocks.BlockMetadata.Id */
      BlockMetadataId?: string | null;
    };
    /** Types of field */
    "CaseMap.PublicApi.Blocks.FieldType":
      | "Text"
      | "TextArea"
      | "Number"
      | "Date"
      | "Bool"
      | "RequiredBool"
      | "Hyperlink"
      | "Dictionary"
      | "Case"
      | "Document"
      | "Contact"
      | "Formula"
      | "NumberingTemplate"
      | "User"
      | "Comments"
      | "Button"
      | "Space";
    /** Calculated value */
    "CaseMap.PublicApi.Blocks.CalculatedValue": {
      /** Result, required if CaseMap.PublicApi.Blocks.CalculatedValue.CalculationFormulaId is not null */
      Result?: number | null;
      /** Id of calculation formula, set to null if CaseMap.PublicApi.Blocks.CalculatedValue.Result is entered manually */
      CalculationFormulaId?: string | null;
    };
    /** Value of field */
    "CaseMap.PublicApi.Blocks.FieldValue": {
      Type: components["schemas"]["CaseMap.PublicApi.Blocks.FieldType"];
      /**
       * Primitive field value,
       * set it if CaseMap.PublicApi.Blocks.FieldValue.Type in [
       * CaseMap.PublicApi.Blocks.FieldType.Text,
       * CaseMap.PublicApi.Blocks.FieldType.TextArea,
       * CaseMap.PublicApi.Blocks.FieldType.Number,
       * CaseMap.PublicApi.Blocks.FieldType.Date,
       * CaseMap.PublicApi.Blocks.FieldType.Bool,
       * CaseMap.PublicApi.Blocks.FieldType.RequiredBool,
       * CaseMap.PublicApi.Blocks.FieldType.HyperlinkCaseMap.PublicApi.Blocks.FieldType.NumberingTemplate],
       * type of property - string if CaseMap.PublicApi.Blocks.FieldValue.Type in [
       * CaseMap.PublicApi.Blocks.FieldType.Text,
       * CaseMap.PublicApi.Blocks.FieldType.TextArea,
       * CaseMap.PublicApi.Blocks.FieldType.Date (in format yyyy-MM-dd),
       * CaseMap.PublicApi.Blocks.FieldType.Hyperlink,
       * CaseMap.PublicApi.Blocks.FieldType.NumberingTemplate],
       * type of property - number if CaseMap.PublicApi.Blocks.FieldValue.Type equals CaseMap.PublicApi.Blocks.FieldType.Number,
       * type of property - bolean if CaseMap.PublicApi.Blocks.FieldValue.Type equals CaseMap.PublicApi.Blocks.FieldType.Bool,
       */
      Value?: { [key: string]: unknown } | null;
      Entity?: components["schemas"]["CaseMap.PublicApi.Entity"];
      CalculatedValue?: components["schemas"]["CaseMap.PublicApi.Blocks.CalculatedValue"];
    };
    /** Field of block */
    "CaseMap.PublicApi.Blocks.Field": {
      /** Id of field metadata CaseMap.PublicApi.Blocks.FieldMetadata.Id */
      FieldMetadataId: string;
      /** Id of line contains field CaseMap.PublicApi.Blocks.Line.Id */
      LineId: string;
      FieldValue?: components["schemas"]["CaseMap.PublicApi.Blocks.FieldValue"];
      /** Id of block contains field CaseMap.PublicApi.Blocks.Block.Id */
      BlockId?: string | null;
      /** Id of block metadata of block contains field CaseMap.PublicApi.Blocks.BlockMetadata.Id */
      BlockMetadataId?: string | null;
      /** Id of line metadata of line contains field CaseMap.PublicApi.Blocks.LineMetadata.Id */
      LineMetadataId?: string | null;
    };
    /** Request to create Event */
    "CaseMap.PublicApi.Events.CreateOrUpdateEventRequest": {
      /** Name */
      Name: string;
      /** Description */
      Description?: string | null;
      Case?: components["schemas"]["CaseMap.PublicApi.Entity"];
      Type?: components["schemas"]["CaseMap.PublicApi.EventTypes.EventType"];
      /** Is all day event */
      AllDay: boolean;
      /** Start date */
      StartDate: string;
      /** Start date */
      EndDate: string;
      /** Attendees */
      Attendees: components["schemas"]["CaseMap.PublicApi.Events.Attendee"][];
      /** Lines of blocks grouped by block and line metadata */
      Lines: components["schemas"]["CaseMap.PublicApi.Blocks.LinesGroup"][];
      /** Fields of blocks */
      Fields: components["schemas"]["CaseMap.PublicApi.Blocks.Field"][];
    };
    /** Detailed information about event */
    "CaseMap.PublicApi.Events.EventDetails": {
      /** Lines of event grouped by line metadata */
      Lines: components["schemas"]["CaseMap.PublicApi.Blocks.LinesGroup"][];
      /** Fields of event */
      Fields: components["schemas"]["CaseMap.PublicApi.Blocks.Field"][];
      /** Name */
      Name?: string | null;
      /** Description */
      Description?: string | null;
      /** Start date */
      StartDate: string;
      /** End date */
      EndDate: string;
      /** Is all day event */
      AllDay: boolean;
      Type?: components["schemas"]["CaseMap.PublicApi.Entity"];
      Case?: components["schemas"]["CaseMap.PublicApi.Entity"];
      /** Attendees */
      Attendees: components["schemas"]["CaseMap.PublicApi.Events.Attendee"][];
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.EventTypes.EventType>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.EventTypes.EventType"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Calculation formula */
    "CaseMap.PublicApi.Blocks.CalculationFormula": {
      /** Id of formula */
      Id?: string | null;
      /** Name */
      Name: string;
      /** Formula */
      Formula: string;
    };
    /** Numbering template */
    "CaseMap.PublicApi.Blocks.NumberingTemplate": {
      /** Id of template */
      Id?: string | null;
      /** Template */
      Template: string;
    };
    /** Script of button */
    "CaseMap.PublicApi.Blocks.ButtonScript": {
      /** Id of script */
      Id: string;
      /** Name */
      Name?: string | null;
    };
    /** Color of button */
    "CaseMap.PublicApi.Blocks.ButtonColor": {
      /** Id of color */
      Id: string;
      /** Name */
      Name?: string | null;
      /** System name */
      SysName?: string | null;
    };
    /** Button */
    "CaseMap.PublicApi.Blocks.Button": {
      Script?: components["schemas"]["CaseMap.PublicApi.Blocks.ButtonScript"];
      Color?: components["schemas"]["CaseMap.PublicApi.Blocks.ButtonColor"];
    };
    /** Description of format of field */
    "CaseMap.PublicApi.Blocks.FieldFormat": {
      Type: components["schemas"]["CaseMap.PublicApi.Blocks.FieldType"];
      Dictionary?: components["schemas"]["CaseMap.PublicApi.Dictionaries.Dictionary"];
      /** Calculation formula for field, required if CaseMap.PublicApi.Blocks.FieldFormat.Type equals CaseMap.PublicApi.Blocks.FieldType.Formula */
      CalculationFormulas?:
        | components["schemas"]["CaseMap.PublicApi.Blocks.CalculationFormula"][]
        | null;
      NumberingTemplate?: components["schemas"]["CaseMap.PublicApi.Blocks.NumberingTemplate"];
      Button?: components["schemas"]["CaseMap.PublicApi.Blocks.Button"];
    };
    /** Metadata of field of line */
    "CaseMap.PublicApi.Blocks.FieldMetadata": {
      /** Id of field */
      Id?: string | null;
      /** Name */
      Name: string;
      /** Tag of field */
      Tag?: string | null;
      /** External id of field */
      ExternalId?: string | null;
      /** Is field required */
      IsRequired: boolean;
      Format: components["schemas"]["CaseMap.PublicApi.Blocks.FieldFormat"];
      DefaultValue?: components["schemas"]["CaseMap.PublicApi.Blocks.FieldValue"];
    };
    /** Metadata of line of block */
    "CaseMap.PublicApi.Blocks.LineMetadata": {
      /** Id of line */
      Id?: string | null;
      /** Allow to add multiple lines to block */
      AllowMultiple: boolean;
      /** Fields of line */
      Fields: components["schemas"]["CaseMap.PublicApi.Blocks.FieldMetadata"][];
    };
    /** Detailed information about event type. */
    "CaseMap.PublicApi.EventTypes.EventTypeDetails": {
      /** Additional attribute lines of event */
      Lines: components["schemas"]["CaseMap.PublicApi.Blocks.LineMetadata"][];
      /** Name */
      Name?: string | null;
      /** System name */
      SysName?: string | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    "CaseDotStar.ServicePackages.Common.Permissions.CommonPermissions.PermissionEnum":
      | "None"
      | "Read"
      | "Insert"
      | "Update"
      | "Delete"
      | "Admin"
      | "Comment"
      | "UpdateOwn"
      | "UpdateAll"
      | "ReadOwn"
      | "ReadAll"
      | "UserReadOwn"
      | "UserReadAll"
      | "UserUpdateOwn"
      | "UserUpdateAll"
      | "UserDeleteOwn"
      | "UserDeleteAll"
      | "DeleteOwn"
      | "DeleteAll"
      | "CaseChangeStage"
      | "ShowInMenu";
    /** Object class */
    "CaseMap.PublicApi.ObjectClasses.ObjectClass": {
      /** Name */
      Name: string;
      /** Section */
      Section: string;
      /** Icon */
      Icon: string;
      /** Is system */
      IsSystem?: boolean;
      /** System name */
      SysName?: string | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Folder contains projects and cases */
    "CaseMap.PublicApi.Folders.FolderListItem": {
      /** Id of folder */
      Id?: string;
      /** This folder has contain sub folder */
      IsLeaf?: boolean;
      /** This node of tree is opened */
      Opened?: boolean;
      /** Sub folders collection */
      Items?:
        | components["schemas"]["CaseMap.PublicApi.Folders.FolderListItem"][]
        | null;
      Permissions?: components["schemas"]["CaseDotStar.ServicePackages.Common.Permissions.CommonPermissions.PermissionEnum"];
      /** Name */
      Name: string;
      ObjectClass: components["schemas"]["CaseMap.PublicApi.ObjectClasses.ObjectClass"];
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Folders.FolderListItem>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.Folders.FolderListItem"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Folder contains projects and cases */
    "CaseMap.PublicApi.Folders.Folder": {
      /** Name */
      Name: string;
      ObjectClass: components["schemas"]["CaseMap.PublicApi.ObjectClasses.ObjectClass"];
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Health status */
    "CaseMap.PublicApi.Health.HealthStatus": "Unknown" | "OK" | "Error";
    /** Information about health status of service */
    "CaseMap.PublicApi.Health.HealthCheckResult": {
      Status: components["schemas"]["CaseMap.PublicApi.Health.HealthStatus"];
      DbStatus: components["schemas"]["CaseMap.PublicApi.Health.HealthStatus"];
    };
    /** Legal form */
    "CaseMap.PublicApi.LegalForms.LegalForm": {
      /** Name */
      Name?: string | null;
      /** System name */
      SysName?: string | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.LegalForms.LegalForm>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.LegalForms.LegalForm"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.ObjectClasses.ObjectClass>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.ObjectClasses.ObjectClass"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Information about synchronization with external services */
    "CaseMap.PublicApi.Cases.SynchronizationInfo": {
      /** External id of object */
      ExternalId: string;
      /** Last synchronization date in UTC */
      LastSyncDate?: string | null;
    };
    /** Stage of object */
    "CaseMap.PublicApi.CaseTypes.Stage": {
      /** Id of stage */
      Id?: string | null;
      /** Name of stage */
      Name: string;
    };
    /** Type of object, contains metadata of objects */
    "CaseMap.PublicApi.CaseTypes.CaseType": {
      /** Name */
      Name: string;
      /** System name */
      SysName?: string | null;
      /** Abbreviation */
      Abbreviation: string;
      /** Is object type deleted */
      IsDeleted: boolean;
      /** Stages of object type */
      Stages: components["schemas"]["CaseMap.PublicApi.CaseTypes.Stage"][];
      /** Description of object type */
      Description?: string | null;
      ObjectClass: components["schemas"]["CaseMap.PublicApi.ObjectClasses.ObjectClass"];
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Project contains cases */
    "CaseMap.PublicApi.Projects.Project": {
      /** Name */
      Name: string;
      /** Description */
      Description?: string | null;
      /** Is project archived */
      IsArchive: boolean;
      Folder: components["schemas"]["CaseMap.PublicApi.Folders.Folder"];
      ObjectClass: components["schemas"]["CaseMap.PublicApi.ObjectClasses.ObjectClass"];
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Status of user. */
    "CaseMap.PublicApi.Users.WorkingStatus": {
      /** Name */
      Name?: string | null;
      /** System name */
      SysName?: string | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** User */
    "CaseMap.PublicApi.Users.User": {
      /** Full name of user */
      Name?: string | null;
      /** Email */
      Email: string;
      /** External id of user (used for windows authentication) */
      ExternalId?: string | null;
      /** First name */
      FirstName: string;
      /** Last name */
      LastName: string;
      /** Middle name */
      MiddleName?: string | null;
      /** Initials */
      Initials: string;
      /** User is client */
      IsClient?: boolean | null;
      /** User is locked */
      IsLocked?: boolean | null;
      WorkingStatus?: components["schemas"]["CaseMap.PublicApi.Users.WorkingStatus"];
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Object */
    "CaseMap.PublicApi.Cases.Case": {
      /** Name */
      Name: string;
      /** Full number */
      Number?: string | null;
      /** Description */
      Description?: string | null;
      /** Is object archived */
      IsArchive?: boolean | null;
      SynchronizationInfo?: components["schemas"]["CaseMap.PublicApi.Cases.SynchronizationInfo"];
      Stage: components["schemas"]["CaseMap.PublicApi.CaseTypes.Stage"];
      CaseType: components["schemas"]["CaseMap.PublicApi.CaseTypes.CaseType"];
      Folder?: components["schemas"]["CaseMap.PublicApi.Folders.Folder"];
      Project?: components["schemas"]["CaseMap.PublicApi.Projects.Project"];
      Assignee: components["schemas"]["CaseMap.PublicApi.Users.User"];
      Parent?: components["schemas"]["CaseMap.PublicApi.Entity"];
      Client?: components["schemas"]["CaseMap.PublicApi.Entity"];
      ObjectClass: components["schemas"]["CaseMap.PublicApi.ObjectClasses.ObjectClass"];
      DocumentFolderId?: string | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Cases.Case>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.Cases.Case"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Simple object with required id. */
    "CaseDotStar.ServicePackages.Common.Response.RequiredIdNameSummary": {
      Id: string;
      Name?: string | null;
    };
    /**
     * Container for tagged value.
     * Only one field must by fill.
     */
    "CaseMap.PublicApi.Blocks.TaggedField": {
      /** Simple value. */
      Value?: { [key: string]: unknown } | null;
      Entity?: components["schemas"]["CaseDotStar.ServicePackages.Common.Response.RequiredIdNameSummary"];
      CalculatedValue?: components["schemas"]["CaseMap.PublicApi.Blocks.CalculatedValue"];
      /** Array of lines */
      Lines?:
        | components["schemas"]["CaseMap.PublicApi.Blocks.TaggedField"][]
        | null;
      /** Array of blocks */
      Blocks?:
        | components["schemas"]["CaseMap.PublicApi.Blocks.TaggedField"][]
        | null;
      /** Numbers of lines or blocks for PATCH request. */
      Patch?: number[] | null;
      /** Type of line CaseMap.Modules.Projects.Interfaces.Consts.LineTypeSysNames for this field. */
      LineType?: string | null;
      /**
       * Type of block for this field.
       * Return true for multi blocks.
       * This only makes sense for the top level of nesting. For nested CaseMap.PublicApi.Blocks.TaggedField  be wrong.
       */
      IsRepeatableBlock?: boolean;
      /** Check this object has lines or blocks. */
      HasChildren?: boolean;
    };
    /** Image */
    "CaseMap.PublicApi.Files.Image": {
      /** File metadata ID */
      FileId: string;
      /** Url of this file */
      Url?: string | null;
      /** File name */
      Name: string;
      /** File description */
      Description?: string | null;
    };
    /** Create object with tagged field request */
    "CaseMap.PublicApi.Cases.V2.CreateCaseWithTaggedFieldsRequest": {
      /** Name */
      Name: string;
      /** Full number */
      Number?: string | null;
      Assignee: components["schemas"]["CaseMap.PublicApi.Entity"];
      /** Description */
      Description?: string | null;
      Client?: components["schemas"]["CaseMap.PublicApi.Entity"];
      CaseType: components["schemas"]["CaseMap.PublicApi.Entity"];
      Folder?: components["schemas"]["CaseMap.PublicApi.Entity"];
      Project?: components["schemas"]["CaseMap.PublicApi.Entity"];
      /**
       * Grouped by field values.
       * Key - tag or identifier of field. (see more: <a href="/Docs/tagged_dictionary.pdf">Fields</a>)
       */
      Fields?: {
        [
          key: string
        ]: components["schemas"]["CaseMap.PublicApi.Blocks.TaggedField"];
      } | null;
      /** Images */
      Images?: components["schemas"]["CaseMap.PublicApi.Files.Image"][] | null;
    };
    /** Object with grouped by tag fields. */
    "CaseMap.PublicApi.Cases.V2.CaseWithTaggedFields": {
      /** Images */
      Images?: components["schemas"]["CaseMap.PublicApi.Files.Image"][] | null;
      /**
       * Grouped by field values.
       * Key - tag or identifier of field. (see more: <a href="/Docs/tagged_dictionary.pdf">Fields</a>)
       */
      Fields?: {
        [
          key: string
        ]: components["schemas"]["CaseMap.PublicApi.Blocks.TaggedField"];
      } | null;
      /** Name */
      Name: string;
      /** Full number */
      Number?: string | null;
      /** Description */
      Description?: string | null;
      /** Is object archived */
      IsArchive?: boolean | null;
      SynchronizationInfo?: components["schemas"]["CaseMap.PublicApi.Cases.SynchronizationInfo"];
      Stage: components["schemas"]["CaseMap.PublicApi.CaseTypes.Stage"];
      CaseType: components["schemas"]["CaseMap.PublicApi.CaseTypes.CaseType"];
      Folder?: components["schemas"]["CaseMap.PublicApi.Folders.Folder"];
      Project?: components["schemas"]["CaseMap.PublicApi.Projects.Project"];
      Assignee: components["schemas"]["CaseMap.PublicApi.Users.User"];
      Parent?: components["schemas"]["CaseMap.PublicApi.Entity"];
      Client?: components["schemas"]["CaseMap.PublicApi.Entity"];
      ObjectClass: components["schemas"]["CaseMap.PublicApi.ObjectClasses.ObjectClass"];
      DocumentFolderId?: string | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Request to update object */
    "CaseMap.PublicApi.Cases.V2.UpdateCaseWithTaggedFieldsRequest": {
      Stage: components["schemas"]["CaseMap.PublicApi.Entity"];
      /** Name */
      Name: string;
      /** Full number */
      Number?: string | null;
      Assignee: components["schemas"]["CaseMap.PublicApi.Entity"];
      /** Description */
      Description?: string | null;
      Client?: components["schemas"]["CaseMap.PublicApi.Entity"];
      CaseType: components["schemas"]["CaseMap.PublicApi.Entity"];
      Folder?: components["schemas"]["CaseMap.PublicApi.Entity"];
      Project?: components["schemas"]["CaseMap.PublicApi.Entity"];
      /**
       * Grouped by field values.
       * Key - tag or identifier of field. (see more: <a href="/Docs/tagged_dictionary.pdf">Fields</a>)
       */
      Fields?: {
        [
          key: string
        ]: components["schemas"]["CaseMap.PublicApi.Blocks.TaggedField"];
      } | null;
      /** Images */
      Images?: components["schemas"]["CaseMap.PublicApi.Files.Image"][] | null;
    };
    /** Block change data. */
    "CaseMap.PublicApi.Cases.V2.BlockPatch": {
      /** The sequence number of the block to be deleted. */
      Remove?: number[] | null;
    };
    /** Line change data. */
    "CaseMap.PublicApi.Cases.V2.LinePatch": {
      /** Sequential numbers of blocks in which you want to delete lines. */
      BlockIndexes?: number[] | null;
      /** Sequential line numbers to be deleted. */
      Remove?: number[] | null;
    };
    /** Request to patch object. */
    "CaseMap.PublicApi.Cases.V2.PatchCaseWithTaggedFieldsRequest": {
      /** Name */
      Name?: string;
      /** Full number */
      Number?: string;
      Assignee?: components["schemas"]["CaseMap.PublicApi.Entity"];
      /** Description */
      Description?: string;
      Client?: components["schemas"]["CaseMap.PublicApi.Entity"];
      CaseType?: components["schemas"]["CaseMap.PublicApi.Entity"];
      Folder?: components["schemas"]["CaseMap.PublicApi.Entity"];
      Project?: components["schemas"]["CaseMap.PublicApi.Entity"];
      /**
       * Grouped by field values.
       * Key - tag or identifier of field. (see more: <a href="/Docs/tagged_dictionary.pdf">Fields</a>)
       */
      Fields?: {
        [
          key: string
        ]: components["schemas"]["CaseMap.PublicApi.Blocks.TaggedField"];
      } | null;
      /** Blocks to change. */
      Blocks?: {
        [
          key: string
        ]: components["schemas"]["CaseMap.PublicApi.Cases.V2.BlockPatch"];
      } | null;
      /** Lines to change. */
      Lines?: {
        [
          key: string
        ]: components["schemas"]["CaseMap.PublicApi.Cases.V2.LinePatch"][];
      } | null;
      /** Images */
      Images?: components["schemas"]["CaseMap.PublicApi.Files.Image"][];
      Stage?: components["schemas"]["CaseMap.PublicApi.Entity"];
    };
    "CaseMap.PublicApi.Cases.AddParticipantToCaseRequest": {
      Participant: components["schemas"]["CaseMap.PublicApi.Entity"];
      RoleInCase?: components["schemas"]["CaseMap.PublicApi.Entity"];
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.CaseTypes.CaseType>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.CaseTypes.CaseType"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Metadata of block */
    "CaseMap.PublicApi.Blocks.BlockMetadata": {
      /** Id of block */
      Id?: string | null;
      /** Name */
      Name: string;
      /** Description */
      Description?: string | null;
      /** Allow to add multiple blocks to case */
      AllowMultiple: boolean;
      /** Lines of block */
      Lines: components["schemas"]["CaseMap.PublicApi.Blocks.LineMetadata"][];
    };
    /** Detailed information about object type. */
    "CaseMap.PublicApi.CaseTypes.CaseTypeDetails": {
      /** Blocks of object */
      Blocks: components["schemas"]["CaseMap.PublicApi.Blocks.BlockMetadata"][];
      /** Name */
      Name: string;
      /** System name */
      SysName?: string | null;
      /** Abbreviation */
      Abbreviation: string;
      /** Is object type deleted */
      IsDeleted: boolean;
      /** Stages of object type */
      Stages: components["schemas"]["CaseMap.PublicApi.CaseTypes.Stage"][];
      /** Description of object type */
      Description?: string | null;
      ObjectClass: components["schemas"]["CaseMap.PublicApi.ObjectClasses.ObjectClass"];
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Types of participant */
    "CaseMap.PublicApi.Participants.ParticipantTypes": "Individual" | "Company";
    /** Info of individual */
    "CaseMap.PublicApi.Participants.ParticipantIndividualInfo": {
      /** Last name */
      LastName?: string | null;
      /** First name */
      FirstName?: string | null;
      /** Middle name */
      MiddleName?: string | null;
      Company?: components["schemas"]["CaseMap.PublicApi.Entity"];
      /** Position */
      JobTitle?: string | null;
      /** Date of Birth. */
      DateOfBirth?: string | null;
      /** Social security number */
      SSN?: string | null;
    };
    /** Info of company */
    "CaseMap.PublicApi.Participants.ParticipantCompanyInfo": {
      /** Name */
      Name?: string | null;
      /** Identification number (INN) */
      IdNumber?: string | null;
      /** KPP */
      KPP?: string | null;
      /** OGRN */
      OGRN?: string | null;
      /** OKPO */
      OKPO?: string | null;
      LegalForm?: components["schemas"]["CaseMap.PublicApi.Entity"];
    };
    /** Info of participant contacts */
    "CaseMap.PublicApi.Participants.ParticipantContactInfo": {
      /** E-mail */
      Email?: string | null;
      /** Phone number */
      Phone?: string | null;
      /** Website */
      Site?: string | null;
      /** Address */
      Address?: string | null;
    };
    /** Participant */
    "CaseMap.PublicApi.Participants.Participant": {
      /** Name */
      Name?: string | null;
      Type?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantTypes"];
      /** Identifier of LEDES client */
      LEDESClientId?: string | null;
      IndividualInfo?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantIndividualInfo"];
      CompanyInfo?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantCompanyInfo"];
      ContactInfo?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantContactInfo"];
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Participants.Participant>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.Participants.Participant"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Request to create participant */
    "CaseMap.PublicApi.Participants.CreateParticipantRequest": {
      Type: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantTypes"];
      /** Identifier of LEDES client */
      LEDESClientId?: string | null;
      IndividualInfo?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantIndividualInfo"];
      CompanyInfo?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantCompanyInfo"];
      ContactInfo?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantContactInfo"];
      /** Lines of blocks grouped by block and line metadata */
      Lines: components["schemas"]["CaseMap.PublicApi.Blocks.LinesGroup"][];
      /** Fields of blocks */
      Fields: components["schemas"]["CaseMap.PublicApi.Blocks.Field"][];
    };
    /** Detailed information about participant */
    "CaseMap.PublicApi.Participants.ParticipantDetails": {
      /** Lines of event grouped by line metadata */
      Lines: components["schemas"]["CaseMap.PublicApi.Blocks.LinesGroup"][];
      /** Fields of event */
      Fields: components["schemas"]["CaseMap.PublicApi.Blocks.Field"][];
      /** Name */
      Name?: string | null;
      Type?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantTypes"];
      /** Identifier of LEDES client */
      LEDESClientId?: string | null;
      IndividualInfo?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantIndividualInfo"];
      CompanyInfo?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantCompanyInfo"];
      ContactInfo?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantContactInfo"];
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Names of fields for patching */
    "CaseMap.PublicApi.Participants.PatchParticipantSystemFieldNames":
      | "LEDESClientId"
      | "Email"
      | "Phone"
      | "Site"
      | "Address"
      | "LastName"
      | "FirstName"
      | "MiddleName"
      | "Company"
      | "JobTitle"
      | "DateOfBirth"
      | "SSN"
      | "Name"
      | "IdNumber"
      | "KPP"
      | "OGRN"
      | "OKPO"
      | "LegalForm";
    /** Types of field identity */
    "CaseMap.PublicApi.PatchCustomFieldIdentityTypes":
      | "Id"
      | "Tag"
      | "ExternalId";
    /** Info of fields for patching */
    "CaseMap.PublicApi.Participants.PatchParticipantCustomField": {
      FieldValue: components["schemas"]["CaseMap.PublicApi.Blocks.FieldValue"];
      FieldIdentityType: components["schemas"]["CaseMap.PublicApi.PatchCustomFieldIdentityTypes"];
      /** Id of field, required if FieldIdentityType is Id */
      Id?: string | null;
      /** Tag of field, required if FieldIdentityType is Tag */
      Tag?: string | null;
      /** External id of field, required if FieldIdentityType is ExternalId */
      ExternalId?: string | null;
    };
    /** Request to patch participant */
    "CaseMap.PublicApi.Participants.PatchParticipantRequest": {
      /** Identifier of LEDES client */
      LEDESClientId?: string | null;
      IndividualInfo?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantIndividualInfo"];
      CompanyInfo?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantCompanyInfo"];
      ContactInfo?: components["schemas"]["CaseMap.PublicApi.Participants.ParticipantContactInfo"];
      /** Names of system fields for patching */
      SystemFields: components["schemas"]["CaseMap.PublicApi.Participants.PatchParticipantSystemFieldNames"][];
      /** Info of block fields for patching */
      CustomFields: components["schemas"]["CaseMap.PublicApi.Participants.PatchParticipantCustomField"][];
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Projects.Project>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.Projects.Project"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Object relationship type with entities */
    "CaseMap.PublicApi.RelatedObjects.ObjectRelationTypeEnum":
      | "ObjectToObjects"
      | "ObjectToIntakeObjects";
    "CaseMap.Modules.Projects.App.RelatedObjects.LinkObjectType":
      | "Project"
      | "IntakeForm";
    "CaseMap.Modules.Projects.App.RelatedObjects.ViewModels.RelatedObjectDto": {
      Id: string;
      Name?: string | null;
      Type?: components["schemas"]["CaseMap.Modules.Projects.App.RelatedObjects.LinkObjectType"];
      Description?: string | null;
    };
    /** Request to create relationship to object */
    "CaseMap.PublicApi.RelatedObjects.CreateRelatedObjectRequest": {
      /** The identifier of the linked object */
      Id: string;
      Type?: components["schemas"]["CaseMap.Modules.Projects.App.RelatedObjects.LinkObjectType"];
      /** Description to relationship */
      Description?: string | null;
    };
    "CaseMap.PublicApi.RolesInCase.RoleInCase": {
      /** System name. */
      SysName?: string | null;
      /** Name of role. */
      Name?: string | null;
      /** Flag whether the value is custom. */
      IsCustom?: boolean | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.RolesInCase.RoleInCase>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.RolesInCase.RoleInCase"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Request for running script */
    "CaseMap.PublicApi.Scripts.ScriptRequest": {
      /** If set to true then script runs asynchronously. */
      IsAsync?: boolean | null;
      /** Data passed to the script */
      Data?: { [key: string]: unknown } | null;
    };
    /** Priority of task */
    "CaseMap.PublicApi.TaskPriorities.TaskPriority": {
      /** Name */
      Name?: string | null;
      /** System name */
      SysName?: string | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.TaskPriorities.TaskPriority>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.TaskPriorities.TaskPriority"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Type (name) of task */
    "CaseMap.PublicApi.TaskTypes.TaskType": {
      /** Name */
      Name?: string | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Assignee */
    "CaseMap.PublicApi.Tasks.Assignee": {
      /** Type */
      Type: string;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Status of task */
    "CaseMap.PublicApi.TaskStatuses.TaskStatus": {
      /** Name */
      Name?: string | null;
      /** System name */
      SysName?: string | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Task */
    "CaseMap.PublicApi.Tasks.Task": {
      /** Description */
      Description?: string | null;
      /** Due date */
      DueDate?: string | null;
      /** Close date */
      CloseDate?: string | null;
      TaskType: components["schemas"]["CaseMap.PublicApi.TaskTypes.TaskType"];
      Case: components["schemas"]["CaseMap.PublicApi.Entity"];
      Parent?: components["schemas"]["CaseMap.PublicApi.Entity"];
      /** Assignees of task */
      Assignees?:
        | components["schemas"]["CaseMap.PublicApi.Tasks.Assignee"][]
        | null;
      Status: components["schemas"]["CaseMap.PublicApi.TaskStatuses.TaskStatus"];
      Priority: components["schemas"]["CaseMap.PublicApi.TaskPriorities.TaskPriority"];
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Tasks.Task>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.Tasks.Task"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Request to create task */
    "CaseMap.PublicApi.Tasks.CreateOrUpdateTaskRequest": {
      /** Description */
      Description?: string | null;
      /** Due date */
      DueDate?: string | null;
      TaskType: components["schemas"]["CaseMap.PublicApi.TaskTypes.TaskType"];
      Case: components["schemas"]["CaseMap.PublicApi.Entity"];
      Parent?: components["schemas"]["CaseMap.PublicApi.Entity"];
      /** Assignees of task CaseMap.PublicApi.Tasks.Assignee */
      Assignees?:
        | components["schemas"]["CaseMap.PublicApi.Tasks.Assignee"][]
        | null;
      Status: components["schemas"]["CaseMap.PublicApi.TaskStatuses.TaskStatus"];
      Priority: components["schemas"]["CaseMap.PublicApi.TaskPriorities.TaskPriority"];
      /** Lines of blocks grouped by block and line metadata */
      Lines: components["schemas"]["CaseMap.PublicApi.Blocks.LinesGroup"][];
      /** Fields of blocks */
      Fields: components["schemas"]["CaseMap.PublicApi.Blocks.Field"][];
    };
    /** Detailed information about case */
    "CaseMap.PublicApi.Tasks.TaskDetails": {
      /** Lines of blocks grouped by line metadata */
      Lines: components["schemas"]["CaseMap.PublicApi.Blocks.LinesGroup"][];
      /** Fields of blocks */
      Fields: components["schemas"]["CaseMap.PublicApi.Blocks.Field"][];
      /** Description */
      Description?: string | null;
      /** Due date */
      DueDate?: string | null;
      /** Close date */
      CloseDate?: string | null;
      TaskType: components["schemas"]["CaseMap.PublicApi.TaskTypes.TaskType"];
      Case: components["schemas"]["CaseMap.PublicApi.Entity"];
      Parent?: components["schemas"]["CaseMap.PublicApi.Entity"];
      /** Assignees of task */
      Assignees?:
        | components["schemas"]["CaseMap.PublicApi.Tasks.Assignee"][]
        | null;
      Status: components["schemas"]["CaseMap.PublicApi.TaskStatuses.TaskStatus"];
      Priority: components["schemas"]["CaseMap.PublicApi.TaskPriorities.TaskPriority"];
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.TaskStatuses.TaskStatus>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.TaskStatuses.TaskStatus"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.TaskTypes.TaskType>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.TaskTypes.TaskType"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** Detailed information about task type. */
    "CaseMap.PublicApi.TaskTypes.TaskTypeDetails": {
      /** Additional attribute lines of tasks */
      Lines: components["schemas"]["CaseMap.PublicApi.Blocks.LineMetadata"][];
      /** Name */
      Name?: string | null;
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
    /** Page */
    "CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Users.User>": {
      /** Items of page */
      Items: components["schemas"]["CaseMap.PublicApi.Users.User"][];
      /** Next page url if exists, otherwise null */
      NextPageUrl?: string | null;
    };
    /** User details */
    "CaseMap.PublicApi.Users.UserDetails": {
      /**
       * Grouped by field values.
       * Key - tag or identifier of field.
       */
      Fields?: {
        [
          key: string
        ]: components["schemas"]["CaseMap.PublicApi.Blocks.TaggedField"];
      } | null;
      /** Full name of user */
      Name?: string | null;
      /** Email */
      Email: string;
      /** External id of user (used for windows authentication) */
      ExternalId?: string | null;
      /** First name */
      FirstName: string;
      /** Last name */
      LastName: string;
      /** Middle name */
      MiddleName?: string | null;
      /** Initials */
      Initials: string;
      /** User is client */
      IsClient?: boolean | null;
      /** User is locked */
      IsLocked?: boolean | null;
      WorkingStatus?: components["schemas"]["CaseMap.PublicApi.Users.WorkingStatus"];
      /** Id of entity */
      Id: string;
      /** Creation date in UTC */
      CreationDate?: string | null;
      /** Last change date in UTC */
      LastChangeDate?: string | null;
      /** Url of this entity */
      Url?: string | null;
    };
  };
}

export interface operations {
  /** Returns specified dictionary. */
  GetDictionary: {
    parameters: {
      path: {
        /** Id of dictionary */
        id: string;
      };
    };
    responses: {
      /** Dictionary */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Dictionaries.Dictionary"];
        };
      };
      /** Insufficient permissions to Dictionaries section */
      403: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
      /** Specified dictionary not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns dictionary values. */
  GetDictionaryValues: {
    parameters: {
      path: {
        /** Id of dictionary */
        id: string;
      };
    };
    responses: {
      /** Dictionary values */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Dictionaries.DictionaryValue>"];
        };
      };
      /** Specified dictionary not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns dictionary value. */
  GetDictionaryValue: {
    parameters: {
      path: {
        /** Id of dictionary */
        id: string;
        /** Id of dictionary value */
        valueId: string;
      };
    };
    responses: {
      /** Dictionary value */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Dictionaries.DictionaryValue"];
        };
      };
      /** Specified dictionary or dictionary value not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Downloads file from the server */
  Download: {
    parameters: {
      path: {
        /** File metadata Id */
        id: string;
      };
    };
    responses: {
      /** File */
      200: {
        content: {
          "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.IActionResult"];
        };
      };
      /** Specified file not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns events */
  GetEvents: {
    parameters: {
      query: {
        /** Filter events by case */
        CaseId?: string | null;
        /** Min start date of events in yyyy-MM-ddTHH:mm:ss.fffZ format in UTC (inclusive) */
        MinDate?: string | null;
        /** Max start date of events in yyyy-MM-ddTHH:mm:ss.fffZ format in UTC (exclusive) */
        MaxDate?: string | null;
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** List of events */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Events.Event>"];
        };
      };
      /** Insufficient permissions to Events section */
      403: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns detailed information about specified event */
  GetEvent: {
    parameters: {
      path: {
        /** Id of event */
        id: string;
      };
    };
    responses: {
      /** Event */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Events.EventDetails"];
        };
      };
      /** Insufficient permissions to Events section */
      403: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
      /** Specified event not found or not enough permissions */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns all event types */
  GetEventTypes: {
    parameters: {
      query: {
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** List of event types */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.EventTypes.EventType>"];
        };
      };
    };
  };
  /** Returns detailed information about specified event type */
  GetEventType: {
    parameters: {
      path: {
        /** Id of event type */
        id: string;
      };
    };
    responses: {
      /** Event type detailed information */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.EventTypes.EventTypeDetails"];
        };
      };
      /** Specified event type not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns folders. */
  GetFolders: {
    parameters: {
      query: {
        /** Filter folders by object class. */
        ObjectClassId?: string | null;
        /** Filter folder by parent folder Id */
        ParentId?: string | null;
        /** Filter folder by folder name */
        Name?: string | null;
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** List of folders */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Folders.FolderListItem>"];
        };
      };
    };
  };
  /** Returns specified folder, folder contains projects and cases. */
  GetFolder: {
    parameters: {
      path: {
        /** Id of folder */
        id: string;
      };
    };
    responses: {
      /** Folder */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Folders.Folder"];
        };
      };
      /** Specified folder not found or not enough permissions */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns all legal forms. */
  GetLegalForms: {
    parameters: {
      query: {
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** List of legal forms */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.LegalForms.LegalForm>"];
        };
      };
    };
  };
  /** Returns detailed information about specified legal form. */
  GetLegalForm: {
    parameters: {
      path: {
        /** Id of legal form */
        id: string;
      };
    };
    responses: {
      /** Legal form detailed information */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.LegalForms.LegalForm"];
        };
      };
      /** Specified legal form not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns object classes. */
  GetObjectClasses: {
    responses: {
      /** List of object classes. */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.ObjectClasses.ObjectClass>"];
        };
      };
    };
  };
  /** Returns specified object class. */
  GetObjectClass: {
    parameters: {
      path: {
        /** Id of object class. */
        id: string;
      };
    };
    responses: {
      /** Object class. */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.ObjectClasses.ObjectClass"];
        };
      };
      /** Specified object class not found. */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns objects. */
  GetCases: {
    parameters: {
      query: {
        /** Filter objects by type */
        CaseTypeId?: string | null;
        /** Get objects from folder */
        FolderId?: string | null;
        /** Get objects from project */
        ProjectId?: string | null;
        /** Filter objects by assignee */
        AssigneeId?: string | null;
        /** Filter archived objects */
        IsArchive?: boolean | null;
        /** Min creation date of objects in yyyy-MM-ddTHH:mm:ss.fffZ format in UTC (inclusive) */
        MinDate?: string | null;
        /** Max creation date of objects in yyyy-MM-ddTHH:mm:ss.fffZ format in UTC (exclusive) */
        MaxDate?: string | null;
        /** Min change date of objects in yyyy-MM-ddTHH:mm:ss.fffZ format in UTC (inclusive) */
        MinChangeDate?: string | null;
        /** Max change date of objects in yyyy-MM-ddTHH:mm:ss.fffZ format in UTC (exclusive) */
        MaxChangeDate?: string | null;
        /** Filter objects by object class. */
        ObjectClassId?: string | null;
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** List of objects */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Cases.Case>"];
        };
      };
    };
  };
  /** Returns objects. */
  GetObjects: {
    parameters: {
      query: {
        /** Filter objects by type */
        CaseTypeId?: string | null;
        /** Get objects from folder */
        FolderId?: string | null;
        /** Get objects from project */
        ProjectId?: string | null;
        /** Filter objects by assignee */
        AssigneeId?: string | null;
        /** Filter archived objects */
        IsArchive?: boolean | null;
        /** Min creation date of objects in yyyy-MM-ddTHH:mm:ss.fffZ format in UTC (inclusive) */
        MinDate?: string | null;
        /** Max creation date of objects in yyyy-MM-ddTHH:mm:ss.fffZ format in UTC (exclusive) */
        MaxDate?: string | null;
        /** Min change date of objects in yyyy-MM-ddTHH:mm:ss.fffZ format in UTC (inclusive) */
        MinChangeDate?: string | null;
        /** Max change date of objects in yyyy-MM-ddTHH:mm:ss.fffZ format in UTC (exclusive) */
        MaxChangeDate?: string | null;
        /** Filter objects by object class. */
        ObjectClassId?: string | null;
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** List of objects */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Cases.Case>"];
        };
      };
    };
  };
  /** Returns detailed information about specified object. */
  GetCaseV2: {
    parameters: {
      path: {
        /** Id of object */
        id: string;
      };
    };
    responses: {
      /** Object */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Cases.V2.CaseWithTaggedFields"];
        };
      };
      /** Specified object not found or not enough permissions */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns all object types. */
  GetCaseTypes: {
    parameters: {
      query: {
        /** Filter object types by object class. */
        ObjectClassId?: string | null;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.CaseTypes.CaseType>"];
        };
      };
    };
  };
  /** Returns all object types. */
  GetObjectTypes: {
    parameters: {
      query: {
        /** Filter object types by object class. */
        ObjectClassId?: string | null;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.CaseTypes.CaseType>"];
        };
      };
    };
  };
  /** Returns detailed information about specified object type, object type contains metadata of objects. */
  GetCaseType: {
    parameters: {
      path: {
        /** Id of object type */
        id: string;
      };
    };
    responses: {
      /** Object type detailed information */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.CaseTypes.CaseTypeDetails"];
        };
      };
      /** Specified object type not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns detailed information about specified object type, object type contains metadata of objects. */
  ObjectType: {
    parameters: {
      path: {
        /** Id of object type */
        id: string;
      };
    };
    responses: {
      /** Object type detailed information */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.CaseTypes.CaseTypeDetails"];
        };
      };
      /** Specified object type not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns participants */
  GetParticipants: {
    parameters: {
      query: {
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** Participants */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Participants.Participant>"];
        };
      };
      /** Insufficient permissions to Participants section */
      403: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns detailed information about specified participant */
  GetParticipant: {
    parameters: {
      path: {
        /** Id of participant */
        id: string;
      };
    };
    responses: {
      /** Participant detailed information */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Participants.ParticipantDetails"];
        };
      };
      /** Insufficient permissions to Participants section */
      403: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
      /** Specified participant not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns projects. */
  GetProjects: {
    parameters: {
      query: {
        /** Filter projects by specified folder */
        FolderId?: string | null;
        /** Filter projects by object class. */
        ObjectClassId?: string | null;
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** List of projects */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Projects.Project>"];
        };
      };
    };
  };
  /** Returns specified project, project contains cases. */
  GetProject: {
    parameters: {
      path: {
        /** Id of project */
        id: string;
      };
    };
    responses: {
      /** Project */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Projects.Project"];
        };
      };
      /** Specified project not found or not enough permissions */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  GetRelatedObjects: {
    parameters: {
      path: {
        /** Identifier of parent object */
        objectId: string;
      };
      query: {
        /** Type of link */
        linkType?: components["schemas"]["CaseMap.PublicApi.RelatedObjects.ObjectRelationTypeEnum"];
      };
    };
    responses: {
      /** List of relationship for object */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.Modules.Projects.App.RelatedObjects.ViewModels.RelatedObjectDto"][];
        };
      };
      /** Specified object not found or not enough permissions */
      404: unknown;
    };
  };
  /** Returns all roles in the case */
  GetRolesInCase: {
    parameters: {
      query: {
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** List of roles in the case */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.RolesInCase.RoleInCase>"];
        };
      };
    };
  };
  /** Returns detailed information about specified role in the case */
  GetRoleInCase: {
    parameters: {
      path: {
        /** Id of role in the case */
        id: string;
      };
    };
    responses: {
      /** role in the case detailed information */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.RolesInCase.RoleInCase"];
        };
      };
      /** Specified role in the case not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns all task priorities. */
  GetTaskPriorities: {
    parameters: {
      query: {
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** List of task priorities */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.TaskPriorities.TaskPriority>"];
        };
      };
    };
  };
  /** Returns detailed information about specified task priority. */
  GetTaskPriority: {
    parameters: {
      path: {
        /** Id of task priority */
        id: string;
      };
    };
    responses: {
      /** Task priority detailed information */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.TaskPriorities.TaskPriority"];
        };
      };
      /** Specified task priority not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns tasks */
  GetTasks: {
    parameters: {
      query: {
        /** Filter tasks by case */
        CaseId?: string | null;
        /** Filter tasks by parent task */
        ParentId?: string | null;
        /** Min due date of tasks in yyyy-MM-ddTHH:mm:ss.fffZ format in UTC (inclusive) */
        MinDate?: string | null;
        /** Max due date of tasks in yyyy-MM-ddTHH:mm:ss.fffZ format in UTC (exclusive) */
        MaxDate?: string | null;
        /** Filter task by responsible */
        ResponsibleId?: string | null;
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** List of tasks */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Tasks.Task>"];
        };
      };
      /** Insufficient permissions to Tasks section */
      403: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns detailed information about specified task */
  GetTask: {
    parameters: {
      path: {
        /** Id of task */
        id: string;
      };
    };
    responses: {
      /** Task */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Tasks.TaskDetails"];
        };
      };
      /** Insufficient permissions to Tasks section */
      403: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
      /** Specified task not found or not enough permissions */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns all task statuses */
  GetTaskStatuses: {
    parameters: {
      query: {
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** List of task statuses */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.TaskStatuses.TaskStatus>"];
        };
      };
    };
  };
  /** Returns detailed information about specified task status */
  GetTaskStatus: {
    parameters: {
      path: {
        /** Id of task status */
        id: string;
      };
    };
    responses: {
      /** Task status detailed information */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.TaskStatuses.TaskStatus"];
        };
      };
      /** Specified task status not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns all task types */
  GetTaskTypes: {
    parameters: {
      query: {
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** List of task types */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.TaskTypes.TaskType>"];
        };
      };
    };
  };
  /** Returns detailed information about specified task type */
  GetTaskType: {
    parameters: {
      path: {
        /** Id of task type */
        id: string;
      };
    };
    responses: {
      /** Task type detailed information */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.TaskTypes.TaskTypeDetails"];
        };
      };
      /** Specified task type not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns users. */
  GetUsers: {
    parameters: {
      query: {
        /** null - returns all users, true - returns only clients, false - returns only not client users */
        IsClient?: boolean | null;
        /** null - returns all users, true - returns only locked users, false - returns only active users */
        IsLocked?: boolean | null;
        /** Page number starting with 1 */
        Page?: number | null;
        /** Items per page */
        PageSize?: number | null;
      };
    };
    responses: {
      /** Users */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Pagination.Page<CaseMap.PublicApi.Users.User>"];
        };
      };
      /** Insufficient permissions to Users section */
      403: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
  /** Returns specified user. */
  GetUser: {
    parameters: {
      path: {
        /** Id of user */
        id: string;
      };
    };
    responses: {
      /** User */
      200: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Users.UserDetails"];
        };
      };
      /** Insufficient permissions to Users section */
      403: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
      /** Specified user not found */
      404: {
        content: {
          "application/json": components["schemas"]["CaseMap.PublicApi.Errors.ErrorResponse"];
        };
      };
    };
  };
}

export interface external {}
